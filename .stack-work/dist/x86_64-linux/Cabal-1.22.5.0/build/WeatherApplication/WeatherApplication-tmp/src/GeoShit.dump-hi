
==================== FINAL INTERFACE ====================
2016-02-18 04:42:06.284599 UTC

interface main@main:GeoShit [family instance module] 7103
  interface hash: 1841af1a38bed362fe8307b0edfc673a
  ABI hash: 1137bd232580b105b811dfefbd2ad2e3
  export-list hash: 95fd5f28f49a284fe6c56557812b5b39
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8e6da9117ce77d60019e6109afdf0edb
  sig of: Nothing
  used TH splices: False
  where
exports:
  GeoShit.lookupLatLong
  GeoShit.newLength
  GeoShit.testReq
  GeoShit.AccessPoint{GeoShit.AccessPoint GeoShit.address}
  GeoShit.GeoshitReq{GeoShit.GeoshitReq GeoShit.wifiAPs}
  GeoShit.GeoshitResp{GeoShit.GeoshitResp GeoShit.accuracy GeoShit.location}
  GeoShit.Location{GeoShit.Location GeoShit.lat GeoShit.lng}
module dependencies:
package dependencies: aeson-0.9.0.1@aeson_1MzmS1HzophHVfuEBYhMrR
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      asn1-encoding-0.9.3@asn1e_GyaJpTCz0m93p9MwtJXM8v
                      asn1-parse-0.9.4@asn1p_EiOXJi5vJrMCUEWoS1An79
                      asn1-types-0.3.2@asn1t_6uyF88PICD359B0mWeP6nA
                      async-2.1.0@async_KuqnF1GrhHK5nNp6Zzm3jy
                      attoparsec-0.13.0.1@attop_KGz8kXnHawX2yTRIBzGnQa base-4.8.2.0
                      base64-bytestring-1.0.0.1@base6_AkCk8zInckjJsyQ4AIFHPN
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-builder-0.4.0.1@blaze_GoSGMrJXTmeEBoF3sgxwrM
                      byteable-0.1.1@bytea_38yjJsjDRm9KusCn8Yo4aB
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.5@casei_DNSVdyEjyyl9Og6G8xHN9C
                      cereal-0.5.1.0@cerea_843xOxvPj94HAJ9SD4EJuq
                      connection-0.2.5@conne_17nQafBHHvx1GvFQAVJrI5
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      cookie-0.4.1.6@cooki_Ctx09XBMqY8Hx3YKFuhynr
                      cryptonite-0.10@crypt_9z0j8QI27Av2VIWw0mEkTO
                      data-default-class-0.0.1@datad_K91y8NcZUJI9yaBI61rgdD
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm
                      dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui
                      exceptions-0.8.2.1@excep_6lgwjdgwblY7rzh5s6SLd8
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_8GjadD03dR57AKCJdr90LD
                      hourglass-0.2.9@hourg_8MOIDfr6DODKJWnjukfaUl
                      http-client-tls-0.2.2@httpc_3mIfIZf7LeO3B0PdE8Sm1H
                      http-client-0.4.27@httpc_AhFzzf9L7vQKcd5YXpq83D
                      http-types-0.9@httpt_3Bf1bEHnPYIAJ2rfQRlloD integer-gmp-1.0.0.0
                      memory-0.11@memor_0EiEBIg44i8KGjAeoKnPDs
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
                      network-uri-2.6.0.3@netwo_B6cnyX3vwvIANPyGOhBaPA
                      parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv
                      pem-0.2.2@pem_68T9LQQkAB02O0OO4VHaxc
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      scientific-0.3.4.4@scien_AqBmwDfwK7K24A70hu3AxF
                      socks-0.5.4@socks_BZJ6e1EePGtK56UKTxGOcA
                      split-0.2.3@split_CDzOynTh4l8Ahg1HaWUL4Z
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      streaming-commons-0.1.15.1@strea_C5lcr8jycj3AuVhjUPYiNo
                      template-haskell-2.10.0.0 text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      tls-1.3.4@tls_9ETIeXXlQTO2WP1DEK8kCP
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unordered-containers-0.2.5.1@unord_8BVO2aaPxdK7U6ObhjDGGE
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
                      x509-1.6.3@x509_CpfmpJXFi0TIu7brfBhuFh
                      x509-system-1.6.3@x509s_I4cYAxvPCFhBUyzgmyylPO
                      x509-store-1.6.1@x509s_IPucgn5P9MCKF9LmNT0EcL
                      x509-validation-1.6.3@x509v_1BwVZ4byygm0I96tpzIzW9
                      zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu
orphans: aeson-0.9.0.1@aeson_1MzmS1HzophHVfuEBYhMrR:Data.Aeson.Types.Generic
         aeson-0.9.0.1@aeson_1MzmS1HzophHVfuEBYhMrR:Data.Aeson.Types.Instances
         attoparsec-0.13.0.1@attop_KGz8kXnHawX2yTRIBzGnQa:Data.Attoparsec.ByteString.Char8
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_8GjadD03dR57AKCJdr90LD:Data.Hashable.Generic
         http-client-0.4.27@httpc_AhFzzf9L7vQKcd5YXpq83D:Network.HTTP.Client.Request
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Lazy
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.0.1@attop_KGz8kXnHawX2yTRIBzGnQa:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui:Data.DList
                         http-client-0.4.27@httpc_AhFzzf9L7vQKcd5YXpq83D:Network.HTTP.Client
                         network-uri-2.6.0.3@netwo_B6cnyX3vwvIANPyGOhBaPA:Network.URI
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text
                         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_8BVO2aaPxdK7U6ObhjDGGE:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_8BVO2aaPxdK7U6ObhjDGGE:Data.HashSet
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
                         zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu:Codec.Compression.Zlib.Stream
import  -/  aeson-0.9.0.1@aeson_1MzmS1HzophHVfuEBYhMrR:Data.Aeson b9b6e8c91ee478d3739c74bccb948d6f
import  -/  aeson-0.9.0.1@aeson_1MzmS1HzophHVfuEBYhMrR:Data.Aeson.Encode.ByteString 10bbb29373a02c6990d018658751a278
import  -/  aeson-0.9.0.1@aeson_1MzmS1HzophHVfuEBYhMrR:Data.Aeson.Types 463869de173b46c65bd8cf7020d76e98
import  -/  aeson-0.9.0.1@aeson_1MzmS1HzophHVfuEBYhMrR:Data.Aeson.Types.Class 2757007ec0f54fc800d0de9c871a6588
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Generics c00a6d11ff9e9cf35a82831f837d9e97
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy.Char8 09ba47745068f67282cb8a388f0ad5bc
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  http-client-tls-0.2.2@httpc_3mIfIZf7LeO3B0PdE8Sm1H:Network.HTTP.Client.TLS 4934e9409eb487f7c031504f643c9b7e
import  -/  http-client-0.4.27@httpc_AhFzzf9L7vQKcd5YXpq83D:Network.HTTP.Client d912c0cc3da4db6cc085a9a2e6cea475
import  -/  http-client-0.4.27@httpc_AhFzzf9L7vQKcd5YXpq83D:Network.HTTP.Client.Core 228fda76aad3a160da019b6d7e73719b
import  -/  http-client-0.4.27@httpc_AhFzzf9L7vQKcd5YXpq83D:Network.HTTP.Client.Manager 82f7a5949cee3afa4dd3cf59558ade73
import  -/  http-client-0.4.27@httpc_AhFzzf9L7vQKcd5YXpq83D:Network.HTTP.Client.Request 6ad75a360d124d9ec46c052758b19d85
import  -/  http-client-0.4.27@httpc_AhFzzf9L7vQKcd5YXpq83D:Network.HTTP.Client.Types 68b145079c14eec86ceb823f2b6a94f6
import  -/  regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.RegexLike 776eccb9c0805d13155c8d49517dd8ad
import  -/  regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix 3ca0b3fb8d8cc39854da066d23ae002c
import  -/  regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Wrap 7b6c24017199f1b72c76b1bd305f3615
import  -/  split-0.2.3@split_CDzOynTh4l8Ahg1HaWUL4Z:Data.List.Split 0ce5c537605fc9ad887ec02865b54394
import  -/  split-0.2.3@split_CDzOynTh4l8Ahg1HaWUL4Z:Data.List.Split.Internals 963ae3cccb2c92e36d269de482ab8341
4e54c0ef57583ac4616032443f9ccaf7
  $fConstructorAccessPoint ::
    GHC.Generics.Constructor GeoShit.C1_0AccessPoint
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.C1_0AccessPoint
                  GeoShit.$fConstructorAccessPoint_$cconName
                  GeoShit.$fConstructorAccessPoint_$s$dmconFixity
                  GeoShit.$fConstructorAccessPoint_$cconIsRecord -}
f4f9aec541b119c8d792c2143a0ac528
  $fConstructorAccessPoint1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AccessPoint"#) -}
4e54c0ef57583ac4616032443f9ccaf7
  $fConstructorAccessPoint_$cconIsRecord ::
    t GeoShit.C1_0AccessPoint f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0AccessPoint f a15 ->
                 GHC.Types.True) -}
4e54c0ef57583ac4616032443f9ccaf7
  $fConstructorAccessPoint_$cconName ::
    t GeoShit.C1_0AccessPoint f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0AccessPoint f a15 ->
                 GeoShit.$fConstructorAccessPoint1) -}
4e54c0ef57583ac4616032443f9ccaf7
  $fConstructorAccessPoint_$s$dmconFixity ::
    t GeoShit.C1_0AccessPoint f a -> GHC.Generics.Fixity
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0AccessPoint f a15 ->
                 GHC.Generics.Prefix) -}
55a34017a722a8d4241705d6836a559b
  $fConstructorGeoshitReq ::
    GHC.Generics.Constructor GeoShit.C1_0GeoshitReq
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.C1_0GeoshitReq
                  GeoShit.$fConstructorGeoshitReq_$cconName
                  GeoShit.$fConstructorGeoshitReq_$s$dmconFixity
                  GeoShit.$fConstructorGeoshitReq_$cconIsRecord -}
b08d7746e5f7ebfc8b4fe9c9bae49037
  $fConstructorGeoshitReq1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GeoshitReq"#) -}
55a34017a722a8d4241705d6836a559b
  $fConstructorGeoshitReq_$cconIsRecord ::
    t GeoShit.C1_0GeoshitReq f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0GeoshitReq f a15 ->
                 GHC.Types.True) -}
55a34017a722a8d4241705d6836a559b
  $fConstructorGeoshitReq_$cconName ::
    t GeoShit.C1_0GeoshitReq f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0GeoshitReq f a15 ->
                 GeoShit.$fConstructorGeoshitReq1) -}
55a34017a722a8d4241705d6836a559b
  $fConstructorGeoshitReq_$s$dmconFixity ::
    t GeoShit.C1_0GeoshitReq f a -> GHC.Generics.Fixity
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0GeoshitReq f a15 ->
                 GHC.Generics.Prefix) -}
36cb3ac4b2049d6bca0ca271a9c08502
  $fConstructorGeoshitResp ::
    GHC.Generics.Constructor GeoShit.C1_0GeoshitResp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.C1_0GeoshitResp
                  GeoShit.$fConstructorGeoshitResp_$cconName
                  GeoShit.$fConstructorGeoshitResp_$s$dmconFixity
                  GeoShit.$fConstructorGeoshitResp_$cconIsRecord -}
da4bd3db8505617d432141bbe2540d53
  $fConstructorGeoshitResp1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GeoshitResp"#) -}
36cb3ac4b2049d6bca0ca271a9c08502
  $fConstructorGeoshitResp_$cconIsRecord ::
    t GeoShit.C1_0GeoshitResp f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0GeoshitResp f a15 ->
                 GHC.Types.True) -}
36cb3ac4b2049d6bca0ca271a9c08502
  $fConstructorGeoshitResp_$cconName ::
    t GeoShit.C1_0GeoshitResp f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0GeoshitResp f a15 ->
                 GeoShit.$fConstructorGeoshitResp1) -}
36cb3ac4b2049d6bca0ca271a9c08502
  $fConstructorGeoshitResp_$s$dmconFixity ::
    t GeoShit.C1_0GeoshitResp f a -> GHC.Generics.Fixity
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0GeoshitResp f a15 ->
                 GHC.Generics.Prefix) -}
e84c4e60af0f53406b149a64ce74866e
  $fConstructorLocation ::
    GHC.Generics.Constructor GeoShit.C1_0Location
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.C1_0Location
                  GeoShit.$fConstructorLocation_$cconName
                  GeoShit.$fConstructorLocation_$s$dmconFixity
                  GeoShit.$fConstructorLocation_$cconIsRecord -}
1a4041e54576682fd7acb6b974839b07
  $fConstructorLocation1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Location"#) -}
e84c4e60af0f53406b149a64ce74866e
  $fConstructorLocation_$cconIsRecord ::
    t GeoShit.C1_0Location f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0Location f a15 ->
                 GHC.Types.True) -}
e84c4e60af0f53406b149a64ce74866e
  $fConstructorLocation_$cconName ::
    t GeoShit.C1_0Location f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0Location f a15 ->
                 GeoShit.$fConstructorLocation1) -}
e84c4e60af0f53406b149a64ce74866e
  $fConstructorLocation_$s$dmconFixity ::
    t GeoShit.C1_0Location f a -> GHC.Generics.Fixity
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.C1_0Location f a15 ->
                 GHC.Generics.Prefix) -}
92144396dcf694a4a56bc6a93d3bb23e
  $fDatatypeAccessPoint ::
    GHC.Generics.Datatype GeoShit.D1AccessPoint
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.D1AccessPoint
                  GeoShit.$fDatatypeAccessPoint_$cdatatypeName
                  GeoShit.$fDatatypeAccessPoint_$cmoduleName
                  GeoShit.$fDatatypeAccessPoint_$s$dmisNewtype -}
26dfe9c2b6c32ba314938497fcea082f
  $fDatatypeAccessPoint1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GeoShit"#) -}
92144396dcf694a4a56bc6a93d3bb23e
  $fDatatypeAccessPoint_$cdatatypeName ::
    t GeoShit.D1AccessPoint f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1AccessPoint f a15 ->
                 GeoShit.$fConstructorAccessPoint1) -}
92144396dcf694a4a56bc6a93d3bb23e
  $fDatatypeAccessPoint_$cmoduleName ::
    t GeoShit.D1AccessPoint f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1AccessPoint f a15 ->
                 GeoShit.$fDatatypeAccessPoint1) -}
92144396dcf694a4a56bc6a93d3bb23e
  $fDatatypeAccessPoint_$s$dmisNewtype ::
    t GeoShit.D1AccessPoint f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1AccessPoint f a15 ->
                 GHC.Types.False) -}
0fa0af4fb41bda75bd137b7b0af0e219
  $fDatatypeGeoshitReq :: GHC.Generics.Datatype GeoShit.D1GeoshitReq
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.D1GeoshitReq
                  GeoShit.$fDatatypeGeoshitReq_$cdatatypeName
                  GeoShit.$fDatatypeGeoshitReq_$cmoduleName
                  GeoShit.$fDatatypeGeoshitReq_$s$dmisNewtype -}
0fa0af4fb41bda75bd137b7b0af0e219
  $fDatatypeGeoshitReq_$cdatatypeName ::
    t GeoShit.D1GeoshitReq f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1GeoshitReq f a15 ->
                 GeoShit.$fConstructorGeoshitReq1) -}
0fa0af4fb41bda75bd137b7b0af0e219
  $fDatatypeGeoshitReq_$cmoduleName ::
    t GeoShit.D1GeoshitReq f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1GeoshitReq f a15 ->
                 GeoShit.$fDatatypeAccessPoint1) -}
0fa0af4fb41bda75bd137b7b0af0e219
  $fDatatypeGeoshitReq_$s$dmisNewtype ::
    t GeoShit.D1GeoshitReq f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1GeoshitReq f a15 ->
                 GHC.Types.False) -}
77060fbd0bad0ffbe755933903fec7c9
  $fDatatypeGeoshitResp ::
    GHC.Generics.Datatype GeoShit.D1GeoshitResp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.D1GeoshitResp
                  GeoShit.$fDatatypeGeoshitResp_$cdatatypeName
                  GeoShit.$fDatatypeGeoshitResp_$cmoduleName
                  GeoShit.$fDatatypeGeoshitResp_$s$dmisNewtype -}
77060fbd0bad0ffbe755933903fec7c9
  $fDatatypeGeoshitResp_$cdatatypeName ::
    t GeoShit.D1GeoshitResp f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1GeoshitResp f a15 ->
                 GeoShit.$fConstructorGeoshitResp1) -}
77060fbd0bad0ffbe755933903fec7c9
  $fDatatypeGeoshitResp_$cmoduleName ::
    t GeoShit.D1GeoshitResp f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1GeoshitResp f a15 ->
                 GeoShit.$fDatatypeAccessPoint1) -}
77060fbd0bad0ffbe755933903fec7c9
  $fDatatypeGeoshitResp_$s$dmisNewtype ::
    t GeoShit.D1GeoshitResp f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1GeoshitResp f a15 ->
                 GHC.Types.False) -}
5a32c7f75014afffc90ef7b069c33482
  $fDatatypeLocation :: GHC.Generics.Datatype GeoShit.D1Location
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.D1Location
                  GeoShit.$fDatatypeLocation_$cdatatypeName
                  GeoShit.$fDatatypeLocation_$cmoduleName
                  GeoShit.$fDatatypeLocation_$s$dmisNewtype -}
5a32c7f75014afffc90ef7b069c33482
  $fDatatypeLocation_$cdatatypeName ::
    t GeoShit.D1Location f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1Location f a15 ->
                 GeoShit.$fConstructorLocation1) -}
5a32c7f75014afffc90ef7b069c33482
  $fDatatypeLocation_$cmoduleName ::
    t GeoShit.D1Location f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1Location f a15 ->
                 GeoShit.$fDatatypeAccessPoint1) -}
5a32c7f75014afffc90ef7b069c33482
  $fDatatypeLocation_$s$dmisNewtype ::
    t GeoShit.D1Location f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.D1Location f a15 ->
                 GHC.Types.False) -}
5009ef72efb4c0c48c50da051026bce8
  $fFromJSONAccessPoint ::
    Data.Aeson.Types.Class.FromJSON GeoShit.AccessPoint
  DFunId[0]
  {- Arity: 1, Strictness: <L,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fFromJSONAccessPoint_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <GeoShit.AccessPoint>_N)) -}
1ae3abb754070cad6a201514b930c207
  $fFromJSONAccessPoint1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "String"#) -}
5009ef72efb4c0c48c50da051026bce8
  $fFromJSONAccessPoint2 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success
         (GHC.Generics.S1
            GeoShit.S1_0_0AccessPoint
            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
            GHC.Prim.Any)
         f
         r
    -> f r
  {- Arity: 2, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (f :: * -> *)
                   @ r
                   kf :: Data.Aeson.Types.Internal.Failure f r
                   _ks :: Data.Aeson.Types.Internal.Success
                            (GHC.Generics.S1
                               GeoShit.S1_0_0AccessPoint
                               (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                               GHC.Prim.Any)
                            f
                            r ->
                 kf GeoShit.$fFromJSONAccessPoint_msg3) -}
6b4fabcf096631acf82c01af2265aed6
  $fFromJSONAccessPoint3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GeoShit.$fFromJSONAccessPoint5
                   GeoShit.$fFromJSONAccessPoint4) -}
49e02ce2c37c4d7536f0552fea7924df
  $fFromJSONAccessPoint4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\" was not found"#) -}
dc5ba0eb18dba13d24d9b7de54ae8c7f
  $fFromJSONAccessPoint5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "address"#) -}
3a7462136f4d888387cb6dc76be30dc9
  $fFromJSONAccessPoint6 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 GeoShit.$fFromJSONAccessPoint8
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   GeoShit.$fFromJSONAccessPoint7
                   GeoShit.$fFromJSONAccessPoint5
                   0
                   ipv }) -}
7c773f304dffd48535760261fccdd0ef
  $fFromJSONAccessPoint7 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4) -}
f7ccb28da23e1dabf2a55ed3e420558a
  $fFromJSONAccessPoint8 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
a7014ef334645f1375ab255f3ffd7100
  $fFromJSONAccessPoint9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "record (:*:)"#) -}
5009ef72efb4c0c48c50da051026bce8
  $fFromJSONAccessPoint_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser GeoShit.AccessPoint
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ x :: Data.Aeson.Types.Internal.Value ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          (GHC.Generics.M1
                             GHC.Generics.S
                             GeoShit.S1_0_0AccessPoint
                             (GHC.Generics.Rec0 GHC.Base.String)
                             GHC.Prim.Any)
                   = case x of wild {
                       DEFAULT
                       -> Data.Aeson.Types.Instances.typeMismatch
                            @ (GHC.Generics.M1
                                 GHC.Generics.S
                                 GeoShit.S1_0_0AccessPoint
                                 (GHC.Generics.Rec0 GHC.Base.String)
                                 GHC.Prim.Any)
                            GeoShit.$fFromJSONAccessPoint9
                            wild
                       Data.Aeson.Types.Internal.Object obj
                       -> case GeoShit.$fFromJSONAccessPoint_a11 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Data.Aeson.Types.Instances.$w$slookup
                                 @ Data.Aeson.Types.Internal.Value
                                 ww1
                                 ww2
                                 ww3
                                 obj of wild1 {
                            GHC.Base.Nothing
                            -> GeoShit.$fFromJSONAccessPoint2
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                         <GHC.Generics.S1
                                            GeoShit.S1_0_0AccessPoint
                                            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                            GHC.Prim.Any>_R))
                            GHC.Base.Just x1
                            -> let {
                                 m1 :: Data.Aeson.Types.Internal.Parser [GHC.Types.Char]
                                 = case x1 of wild2 {
                                     DEFAULT
                                     -> Data.Aeson.Types.Instances.typeMismatch
                                          @ GHC.Base.String
                                          GeoShit.$fFromJSONAccessPoint1
                                          wild2
                                     Data.Aeson.Types.Internal.String txt
                                     -> case txt of wild3 { Data.Text.Internal.Text dt dt1 dt2 ->
                                        let {
                                          a63 :: GHC.Base.String
                                          = let {
                                              a15 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                            } in
                                            letrec {
                                              $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                                {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                                              = \ ww4 :: GHC.Prim.Int# ->
                                                case GHC.Prim.tagToEnum#
                                                       @ GHC.Types.Bool
                                                       (GHC.Prim.>=# ww4 a15) of wild4 {
                                                  GHC.Types.False
                                                  -> case GHC.Prim.indexWord16Array#
                                                            dt
                                                            ww4 of r# { DEFAULT ->
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.geWord#
                                                               r#
                                                               __word 55296) of wild5 {
                                                       GHC.Types.False
                                                       -> GHC.Types.:
                                                            @ GHC.Types.Char
                                                            (GHC.Types.C#
                                                               (GHC.Prim.chr#
                                                                  (GHC.Prim.word2Int# r#)))
                                                            ($wunfold (GHC.Prim.+# ww4 1))
                                                       GHC.Types.True
                                                       -> case GHC.Prim.tagToEnum#
                                                                 @ GHC.Types.Bool
                                                                 (GHC.Prim.leWord#
                                                                    r#
                                                                    __word 56319) of wild6 {
                                                            GHC.Types.False
                                                            -> GHC.Types.:
                                                                 @ GHC.Types.Char
                                                                 (GHC.Types.C#
                                                                    (GHC.Prim.chr#
                                                                       (GHC.Prim.word2Int# r#)))
                                                                 ($wunfold (GHC.Prim.+# ww4 1))
                                                            GHC.Types.True
                                                            -> case GHC.Prim.indexWord16Array#
                                                                      dt
                                                                      (GHC.Prim.+#
                                                                         ww4
                                                                         1) of r#1 { DEFAULT ->
                                                               GHC.Types.:
                                                                 @ GHC.Types.Char
                                                                 (GHC.Types.C#
                                                                    (GHC.Prim.chr#
                                                                       (GHC.Prim.+#
                                                                          (GHC.Prim.+#
                                                                             (GHC.Prim.uncheckedIShiftL#
                                                                                (GHC.Prim.-#
                                                                                   (GHC.Prim.word2Int#
                                                                                      r#)
                                                                                   55296)
                                                                                10)
                                                                             (GHC.Prim.-#
                                                                                (GHC.Prim.word2Int#
                                                                                   r#1)
                                                                                56320))
                                                                          65536)))
                                                                 ($wunfold
                                                                    (GHC.Prim.+# ww4 2)) } } } }
                                                  GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                            } in
                                            $wunfold dt1
                                        } in
                                        (\ @ (f :: * -> *)
                                           @ r
                                           _kf :: Data.Aeson.Types.Internal.Failure f r
                                           ks :: Data.Aeson.Types.Internal.Success
                                                   GHC.Base.String f r ->
                                         ks a63)
                                          `cast`
                                        (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                                  <GHC.Base.String>_R)) } }
                               } in
                               (\ @ (f1 :: * -> *)
                                  @ r
                                  kf :: Data.Aeson.Types.Internal.Failure f1 r
                                  ks :: Data.Aeson.Types.Internal.Success
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             GeoShit.S1_0_0AccessPoint
                                             (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                             GHC.Prim.Any)
                                          f1
                                          r ->
                                m1
                                  `cast`
                                (Data.Aeson.Types.Internal.NTCo:Parser[0] <[GHC.Types.Char]>_R)
                                  @ f1
                                  @ r
                                  kf
                                  (\ a30 :: [GHC.Types.Char] ->
                                   ks
                                     a30
                                       `cast`
                                     (Trans
                                          (Sym (GHC.Generics.NTCo:K1[0]
                                                    <GHC.Generics.R>_P
                                                    <[GHC.Types.Char]>_R
                                                    <GHC.Prim.Any>_P))
                                          (Sym (GHC.Generics.NTCo:M1[0]
                                                    <GHC.Generics.S>_P
                                                    <GeoShit.S1_0_0AccessPoint>_P
                                                    <GHC.Generics.K1
                                                       GHC.Generics.R
                                                       GHC.Base.String>_R) <GHC.Prim.Any>_N))))
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                         <GHC.Generics.M1
                                            GHC.Generics.S
                                            GeoShit.S1_0_0AccessPoint
                                            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                            GHC.Prim.Any>_R)) } } }
                 } in
                 (\ @ (f1 :: * -> *)
                    @ r
                    kf :: Data.Aeson.Types.Internal.Failure f1 r
                    ks :: Data.Aeson.Types.Internal.Success GeoShit.AccessPoint f1 r ->
                  m `cast`
                  (Data.Aeson.Types.Internal.NTCo:Parser[0]
                       <GHC.Generics.M1
                          GHC.Generics.S
                          GeoShit.S1_0_0AccessPoint
                          (GHC.Generics.Rec0 GHC.Base.String)
                          GHC.Prim.Any>_R)
                    @ f1
                    @ r
                    kf
                    (\ a30 :: GHC.Generics.M1
                                GHC.Generics.S
                                GeoShit.S1_0_0AccessPoint
                                (GHC.Generics.Rec0 GHC.Base.String)
                                GHC.Prim.Any ->
                     ks
                       (GeoShit.AccessPoint
                          a30
                            `cast`
                          (Trans
                               (GHC.Generics.NTCo:M1[0]
                                    <GHC.Generics.S>_P
                                    <GeoShit.S1_0_0AccessPoint>_P
                                    <GHC.Generics.K1
                                       GHC.Generics.R GHC.Base.String>_R <GHC.Prim.Any>_N)
                               (GHC.Generics.NTCo:K1[0]
                                    <GHC.Generics.R>_P <GHC.Base.String>_R <GHC.Prim.Any>_P)))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                           <GeoShit.AccessPoint>_R))) -}
6350c7c930c4ff2997c6e492c0124f05
  $fFromJSONAccessPoint_a11 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   GeoShit.$fFromJSONAccessPoint6) -}
848d696e38f38fc8a90bbb67cf82e8e2
  $fFromJSONAccessPoint_msg3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "The key \""#
                   GeoShit.$fFromJSONAccessPoint3) -}
35f5bdd843de7965b649b0b1a138e613
  $fFromJSONGeoshitReq ::
    Data.Aeson.Types.Class.FromJSON GeoShit.GeoshitReq
  DFunId[0]
  {- Arity: 1, Strictness: <L,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fFromJSONGeoshitReq_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <GeoShit.GeoshitReq>_N)) -}
34718245b77da57171b38171d00f67c6
  $fFromJSONGeoshitReq1 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success [GeoShit.AccessPoint] f r
    -> f r
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (f :: * -> *)
                   @ r
                   _kf :: Data.Aeson.Types.Internal.Failure f r
                   ks :: Data.Aeson.Types.Internal.Success
                           [GeoShit.AccessPoint] f r ->
                 ks (GHC.Types.[] @ GeoShit.AccessPoint)) -}
156f8f8cf9948dbc49a9e5f6cda78259
  $fFromJSONGeoshitReq2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "[a]"#) -}
35f5bdd843de7965b649b0b1a138e613
  $fFromJSONGeoshitReq3 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success
         (GHC.Generics.S1
            GeoShit.S1_0_0GeoshitReq
            (GHC.Generics.K1 GHC.Generics.R [GeoShit.AccessPoint])
            GHC.Prim.Any)
         f
         r
    -> f r
  {- Arity: 2, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (f :: * -> *)
                   @ r
                   kf :: Data.Aeson.Types.Internal.Failure f r
                   _ks :: Data.Aeson.Types.Internal.Success
                            (GHC.Generics.S1
                               GeoShit.S1_0_0GeoshitReq
                               (GHC.Generics.K1 GHC.Generics.R [GeoShit.AccessPoint])
                               GHC.Prim.Any)
                            f
                            r ->
                 kf GeoShit.$fFromJSONGeoshitReq_msg3) -}
9da92d239bdd5ce681e1ff23288705a8
  $fFromJSONGeoshitReq4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GeoShit.$fFromJSONGeoshitReq5
                   GeoShit.$fFromJSONAccessPoint4) -}
1c3458799a3fc6a9c263f161244981f0
  $fFromJSONGeoshitReq5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "wifiAPs"#) -}
be0db19c7e10bb9be78de14aab14b483
  $fFromJSONGeoshitReq6 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 GeoShit.$fFromJSONGeoshitReq7
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   GeoShit.$fFromJSONAccessPoint7
                   GeoShit.$fFromJSONGeoshitReq5
                   0
                   ipv }) -}
d1f754c73eb201d0ed478d7bb0197876
  $fFromJSONGeoshitReq7 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
35f5bdd843de7965b649b0b1a138e613
  $fFromJSONGeoshitReq_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser GeoShit.GeoshitReq
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ x :: Data.Aeson.Types.Internal.Value ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          (GHC.Generics.M1
                             GHC.Generics.S
                             GeoShit.S1_0_0GeoshitReq
                             (GHC.Generics.Rec0 [GeoShit.AccessPoint])
                             GHC.Prim.Any)
                   = case x of wild {
                       DEFAULT
                       -> Data.Aeson.Types.Instances.typeMismatch
                            @ (GHC.Generics.M1
                                 GHC.Generics.S
                                 GeoShit.S1_0_0GeoshitReq
                                 (GHC.Generics.Rec0 [GeoShit.AccessPoint])
                                 GHC.Prim.Any)
                            GeoShit.$fFromJSONAccessPoint9
                            wild
                       Data.Aeson.Types.Internal.Object obj
                       -> case GeoShit.$fFromJSONGeoshitReq_a11 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Data.Aeson.Types.Instances.$w$slookup
                                 @ Data.Aeson.Types.Internal.Value
                                 ww1
                                 ww2
                                 ww3
                                 obj of wild1 {
                            GHC.Base.Nothing
                            -> GeoShit.$fFromJSONGeoshitReq3
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                         <GHC.Generics.S1
                                            GeoShit.S1_0_0GeoshitReq
                                            (GHC.Generics.K1 GHC.Generics.R [GeoShit.AccessPoint])
                                            GHC.Prim.Any>_R))
                            GHC.Base.Just x1
                            -> let {
                                 m1 :: Data.Aeson.Types.Internal.Parser [GeoShit.AccessPoint]
                                 = case x1 of wild2 {
                                     DEFAULT
                                     -> Data.Aeson.Types.Instances.typeMismatch
                                          @ [GeoShit.AccessPoint]
                                          GeoShit.$fFromJSONGeoshitReq2
                                          wild2
                                     Data.Aeson.Types.Internal.Array arr
                                     -> case arr of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                                        GeoShit.$wa ww5 ww6 ww7 } }
                               } in
                               (\ @ (f1 :: * -> *)
                                  @ r
                                  kf :: Data.Aeson.Types.Internal.Failure f1 r
                                  ks :: Data.Aeson.Types.Internal.Success
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             GeoShit.S1_0_0GeoshitReq
                                             (GHC.Generics.K1 GHC.Generics.R [GeoShit.AccessPoint])
                                             GHC.Prim.Any)
                                          f1
                                          r ->
                                m1
                                  `cast`
                                (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                     <[GeoShit.AccessPoint]>_R)
                                  @ f1
                                  @ r
                                  kf
                                  (\ a30 :: [GeoShit.AccessPoint] ->
                                   ks
                                     a30
                                       `cast`
                                     (Trans
                                          (Sym (GHC.Generics.NTCo:K1[0]
                                                    <GHC.Generics.R>_P
                                                    <[GeoShit.AccessPoint]>_R
                                                    <GHC.Prim.Any>_P))
                                          (Sym (GHC.Generics.NTCo:M1[0]
                                                    <GHC.Generics.S>_P
                                                    <GeoShit.S1_0_0GeoshitReq>_P
                                                    <GHC.Generics.K1
                                                       GHC.Generics.R
                                                       [GeoShit.AccessPoint]>_R) <GHC.Prim.Any>_N))))
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                         <GHC.Generics.M1
                                            GHC.Generics.S
                                            GeoShit.S1_0_0GeoshitReq
                                            (GHC.Generics.K1 GHC.Generics.R [GeoShit.AccessPoint])
                                            GHC.Prim.Any>_R)) } } }
                 } in
                 (\ @ (f1 :: * -> *)
                    @ r
                    kf :: Data.Aeson.Types.Internal.Failure f1 r
                    ks :: Data.Aeson.Types.Internal.Success GeoShit.GeoshitReq f1 r ->
                  m `cast`
                  (Data.Aeson.Types.Internal.NTCo:Parser[0]
                       <GHC.Generics.M1
                          GHC.Generics.S
                          GeoShit.S1_0_0GeoshitReq
                          (GHC.Generics.Rec0 [GeoShit.AccessPoint])
                          GHC.Prim.Any>_R)
                    @ f1
                    @ r
                    kf
                    (\ a30 :: GHC.Generics.M1
                                GHC.Generics.S
                                GeoShit.S1_0_0GeoshitReq
                                (GHC.Generics.Rec0 [GeoShit.AccessPoint])
                                GHC.Prim.Any ->
                     ks
                       (GeoShit.GeoshitReq
                          a30
                            `cast`
                          (Trans
                               (GHC.Generics.NTCo:M1[0]
                                    <GHC.Generics.S>_P
                                    <GeoShit.S1_0_0GeoshitReq>_P
                                    <GHC.Generics.K1
                                       GHC.Generics.R [GeoShit.AccessPoint]>_R <GHC.Prim.Any>_N)
                               (GHC.Generics.NTCo:K1[0]
                                    <GHC.Generics.R>_P
                                    <[GeoShit.AccessPoint]>_R
                                    <GHC.Prim.Any>_P)))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                           <GeoShit.GeoshitReq>_R))) -}
9ac1cb616d0e9d54e50628aa1c24e01c
  $fFromJSONGeoshitReq_a11 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   GeoShit.$fFromJSONGeoshitReq6) -}
e3c70b17c0fcbfb527e1f56d22d4d546
  $fFromJSONGeoshitReq_msg3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "The key \""#
                   GeoShit.$fFromJSONGeoshitReq4) -}
fed875e713fbf1c721c693371aae9dfb
  $fFromJSONGeoshitResp ::
    Data.Aeson.Types.Class.FromJSON GeoShit.GeoshitResp
  DFunId[0]
  {- Arity: 1, Strictness: <L,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fFromJSONGeoshitResp_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <GeoShit.GeoshitResp>_N)) -}
fed875e713fbf1c721c693371aae9dfb
  $fFromJSONGeoshitResp1 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.D
            GeoShit.D1GeoshitResp
            (GHC.Generics.M1
               GHC.Generics.C
               GeoShit.C1_0GeoshitResp
               (GHC.Generics.S1
                  GeoShit.S1_0_0GeoshitResp (GHC.Generics.Rec0 GeoShit.Location)
                GHC.Generics.:*: GHC.Generics.S1
                                   GeoShit.S1_0_1GeoshitResp (GHC.Generics.Rec0 GHC.Types.Float)))
            GHC.Prim.Any)
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ x :: Data.Aeson.Types.Internal.Value ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          ((GHC.Generics.:*:)
                             (GHC.Generics.S1
                                GeoShit.S1_0_0GeoshitResp (GHC.Generics.Rec0 GeoShit.Location))
                             (GHC.Generics.S1
                                GeoShit.S1_0_1GeoshitResp (GHC.Generics.Rec0 GHC.Types.Float))
                             GHC.Prim.Any)
                   = case x of wild {
                       DEFAULT
                       -> Data.Aeson.Types.Instances.typeMismatch
                            @ ((GHC.Generics.:*:)
                                 (GHC.Generics.S1
                                    GeoShit.S1_0_0GeoshitResp (GHC.Generics.Rec0 GeoShit.Location))
                                 (GHC.Generics.S1
                                    GeoShit.S1_0_1GeoshitResp (GHC.Generics.Rec0 GHC.Types.Float))
                                 GHC.Prim.Any)
                            GeoShit.$fFromJSONAccessPoint9
                            wild
                       Data.Aeson.Types.Internal.Object obj
                       -> let {
                            a15 :: Data.Aeson.Types.Internal.Parser
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        GeoShit.S1_0_0GeoshitResp
                                        (GHC.Generics.Rec0 GeoShit.Location)
                                        GHC.Prim.Any)
                            = case GeoShit.$fFromJSONGeoshitResp14 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                              case Data.Aeson.Types.Instances.$w$slookup
                                     @ Data.Aeson.Types.Internal.Value
                                     ww1
                                     ww2
                                     ww3
                                     obj of wild1 {
                                GHC.Base.Nothing
                                -> GeoShit.$fFromJSONGeoshitResp11
                                     `cast`
                                   (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                             <GHC.Generics.S1
                                                GeoShit.S1_0_0GeoshitResp
                                                (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
                                                GHC.Prim.Any>_R))
                                GHC.Base.Just x1
                                -> let {
                                     a16 :: Data.Aeson.Types.Internal.Parser
                                              (GHC.Generics.M1
                                                 GHC.Generics.D
                                                 GeoShit.D1Location
                                                 (GHC.Generics.M1
                                                    GHC.Generics.C
                                                    GeoShit.C1_0Location
                                                    (GHC.Generics.S1
                                                       GeoShit.S1_0_0Location
                                                       (GHC.Generics.Rec0 GHC.Types.Float)
                                                     GHC.Generics.:*: GHC.Generics.S1
                                                                        GeoShit.S1_0_1Location
                                                                        (GHC.Generics.Rec0
                                                                           GHC.Types.Float)))
                                                 GHC.Prim.Any)
                                     = GeoShit.$fFromJSONGeoshitResp10 x1
                                   } in
                                   (\ @ (f1 :: * -> *)
                                      @ r
                                      kf :: Data.Aeson.Types.Internal.Failure f1 r
                                      ks :: Data.Aeson.Types.Internal.Success
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 GeoShit.S1_0_0GeoshitResp
                                                 (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
                                                 GHC.Prim.Any)
                                              f1
                                              r ->
                                    a16
                                      `cast`
                                    (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                         (Sub (Sym (GeoShit.Rep_Location[0])) <GHC.Prim.Any>_N))
                                      @ f1
                                      @ r
                                      kf
                                      (\ a30 :: GHC.Generics.Rep GeoShit.Location GHC.Prim.Any ->
                                       ks
                                         (case a30
                                                 `cast`
                                               (Trans
                                                    (Sub (GeoShit.Rep_Location[0]))
                                                    (Trans
                                                         (GHC.Generics.NTCo:M1[0]
                                                              <GHC.Generics.D>_P
                                                              <GeoShit.D1Location>_P
                                                              <GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 GeoShit.C1_0Location
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    GeoShit.S1_0_0Location
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       GHC.Types.Float)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     GeoShit.S1_0_1Location
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        GHC.Types.Float))>_R)
                                                         (GHC.Generics.NTCo:M1[0]
                                                              <GHC.Generics.C>_P
                                                              <GeoShit.C1_0Location>_P
                                                              <GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 GeoShit.S1_0_0Location
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R GHC.Types.Float)
                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                  GHC.Generics.S
                                                                                  GeoShit.S1_0_1Location
                                                                                  (GHC.Generics.K1
                                                                                     GHC.Generics.R
                                                                                     GHC.Types.Float)>_R)) <GHC.Prim.Any>_N) of wild2 { GHC.Generics.:*: ds ds1 ->
                                          (GeoShit.Location
                                             ds
                                               `cast`
                                             (Trans
                                                  (GHC.Generics.NTCo:M1[0]
                                                       <GHC.Generics.S>_P
                                                       <GeoShit.S1_0_0Location>_P
                                                       <GHC.Generics.K1
                                                          GHC.Generics.R
                                                          GHC.Types.Float>_R <GHC.Prim.Any>_N)
                                                  (GHC.Generics.NTCo:K1[0]
                                                       <GHC.Generics.R>_P
                                                       <GHC.Types.Float>_R
                                                       <GHC.Prim.Any>_P))
                                             ds1
                                               `cast`
                                             (Trans
                                                  (GHC.Generics.NTCo:M1[0]
                                                       <GHC.Generics.S>_P
                                                       <GeoShit.S1_0_1Location>_P
                                                       <GHC.Generics.K1
                                                          GHC.Generics.R
                                                          GHC.Types.Float>_R <GHC.Prim.Any>_N)
                                                  (GHC.Generics.NTCo:K1[0]
                                                       <GHC.Generics.R>_P
                                                       <GHC.Types.Float>_R
                                                       <GHC.Prim.Any>_P)))
                                            `cast`
                                          (Trans
                                               (Sym (GHC.Generics.NTCo:K1[0]
                                                         <GHC.Generics.R>_P
                                                         <GeoShit.Location>_R
                                                         <GHC.Prim.Any>_P))
                                               (Sym (GHC.Generics.NTCo:M1[0]
                                                         <GHC.Generics.S>_P
                                                         <GeoShit.S1_0_0GeoshitResp>_P
                                                         <GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GeoShit.Location>_R) <GHC.Prim.Any>_N)) })))
                                     `cast`
                                   (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                             <GHC.Generics.M1
                                                GHC.Generics.S
                                                GeoShit.S1_0_0GeoshitResp
                                                (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
                                                GHC.Prim.Any>_R)) } }
                          } in
                          let {
                            e :: Data.Aeson.Types.Internal.Parser
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      GeoShit.S1_0_1GeoshitResp
                                      (GHC.Generics.Rec0 GHC.Types.Float)
                                      GHC.Prim.Any)
                            = case GeoShit.$fFromJSONGeoshitResp7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                              case Data.Aeson.Types.Instances.$w$slookup
                                     @ Data.Aeson.Types.Internal.Value
                                     ww1
                                     ww2
                                     ww3
                                     obj of wild1 {
                                GHC.Base.Nothing
                                -> GeoShit.$fFromJSONGeoshitResp4
                                     `cast`
                                   (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                             <GHC.Generics.S1
                                                GeoShit.S1_0_1GeoshitResp
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                                                GHC.Prim.Any>_R))
                                GHC.Base.Just x1
                                -> let {
                                     m1 :: Data.Aeson.Types.Internal.Parser GHC.Types.Float
                                     = case x1 of wild2 {
                                         DEFAULT
                                         -> Data.Aeson.Types.Instances.typeMismatch
                                              @ GHC.Types.Float
                                              GeoShit.$fFromJSONGeoshitResp3
                                              wild2
                                         Data.Aeson.Types.Internal.Number s
                                         -> case s of ww4 { Data.Scientific.Scientific ww5 ww6 ->
                                            let {
                                              a30 :: GHC.Types.Float
                                              = case Data.Scientific.$wtoBoundedRealFloat
                                                       @ GHC.Types.Float
                                                       GHC.Float.$fRealFloatFloat
                                                       ww5
                                                       ww6 of wild3 {
                                                  Data.Either.Left x2 -> x2
                                                  Data.Either.Right y -> y }
                                            } in
                                            (\ @ (f :: * -> *)
                                               @ r
                                               _kf :: Data.Aeson.Types.Internal.Failure f r
                                               ks :: Data.Aeson.Types.Internal.Success
                                                       GHC.Types.Float f r ->
                                             ks a30)
                                              `cast`
                                            (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                                      <GHC.Types.Float>_R)) }
                                         Data.Aeson.Types.Internal.Null
                                         -> GeoShit.$fFromJSONGeoshitResp2
                                              `cast`
                                            (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                                      <GHC.Types.Float>_R)) }
                                   } in
                                   (\ @ (f1 :: * -> *)
                                      @ r
                                      kf :: Data.Aeson.Types.Internal.Failure f1 r
                                      ks :: Data.Aeson.Types.Internal.Success
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 GeoShit.S1_0_1GeoshitResp
                                                 (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                                                 GHC.Prim.Any)
                                              f1
                                              r ->
                                    m1
                                      `cast`
                                    (Data.Aeson.Types.Internal.NTCo:Parser[0] <GHC.Types.Float>_R)
                                      @ f1
                                      @ r
                                      kf
                                      (\ a30 :: GHC.Types.Float ->
                                       ks
                                         a30
                                           `cast`
                                         (Trans
                                              (Sym (GHC.Generics.NTCo:K1[0]
                                                        <GHC.Generics.R>_P
                                                        <GHC.Types.Float>_R
                                                        <GHC.Prim.Any>_P))
                                              (Sym (GHC.Generics.NTCo:M1[0]
                                                        <GHC.Generics.S>_P
                                                        <GeoShit.S1_0_1GeoshitResp>_P
                                                        <GHC.Generics.K1
                                                           GHC.Generics.R
                                                           GHC.Types.Float>_R) <GHC.Prim.Any>_N))))
                                     `cast`
                                   (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                             <GHC.Generics.M1
                                                GHC.Generics.S
                                                GeoShit.S1_0_1GeoshitResp
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                                                GHC.Prim.Any>_R)) } }
                          } in
                          (\ @ (f :: * -> *)
                             @ r
                             kf :: Data.Aeson.Types.Internal.Failure f r
                             ks :: Data.Aeson.Types.Internal.Success
                                     ((GHC.Generics.:*:)
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           GeoShit.S1_0_0GeoshitResp
                                           (GHC.Generics.Rec0 GeoShit.Location))
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           GeoShit.S1_0_1GeoshitResp
                                           (GHC.Generics.Rec0 GHC.Types.Float))
                                        GHC.Prim.Any)
                                     f
                                     r ->
                           a15
                             `cast`
                           (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                <GHC.Generics.M1
                                   GHC.Generics.S
                                   GeoShit.S1_0_0GeoshitResp
                                   (GHC.Generics.Rec0 GeoShit.Location)
                                   GHC.Prim.Any>_R)
                             @ f
                             @ r
                             kf
                             (\ a30 :: GHC.Generics.M1
                                         GHC.Generics.S
                                         GeoShit.S1_0_0GeoshitResp
                                         (GHC.Generics.Rec0 GeoShit.Location)
                                         GHC.Prim.Any ->
                              e `cast`
                              (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                   <GHC.Generics.M1
                                      GHC.Generics.S
                                      GeoShit.S1_0_1GeoshitResp
                                      (GHC.Generics.Rec0 GHC.Types.Float)
                                      GHC.Prim.Any>_R)
                                @ f
                                @ r
                                kf
                                (\ a31 :: GHC.Generics.M1
                                            GHC.Generics.S
                                            GeoShit.S1_0_1GeoshitResp
                                            (GHC.Generics.Rec0 GHC.Types.Float)
                                            GHC.Prim.Any ->
                                 ks
                                   (GHC.Generics.:*:
                                      @ (GHC.Generics.M1
                                           GHC.Generics.S
                                           GeoShit.S1_0_0GeoshitResp
                                           (GHC.Generics.Rec0 GeoShit.Location))
                                      @ (GHC.Generics.M1
                                           GHC.Generics.S
                                           GeoShit.S1_0_1GeoshitResp
                                           (GHC.Generics.Rec0 GHC.Types.Float))
                                      @ GHC.Prim.Any
                                      a30
                                      a31))))
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                    <(GHC.Generics.:*:)
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          GeoShit.S1_0_0GeoshitResp
                                          (GHC.Generics.Rec0 GeoShit.Location))
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          GeoShit.S1_0_1GeoshitResp
                                          (GHC.Generics.Rec0 GHC.Types.Float))
                                       GHC.Prim.Any>_R)) }
                 } in
                 (\ @ (f1 :: * -> *)
                    @ r
                    kf :: Data.Aeson.Types.Internal.Failure f1 r
                    ks :: Data.Aeson.Types.Internal.Success
                            (GHC.Generics.M1
                               GHC.Generics.D
                               GeoShit.D1GeoshitResp
                               (GHC.Generics.M1
                                  GHC.Generics.C
                                  GeoShit.C1_0GeoshitResp
                                  (GHC.Generics.S1
                                     GeoShit.S1_0_0GeoshitResp (GHC.Generics.Rec0 GeoShit.Location)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      GeoShit.S1_0_1GeoshitResp
                                                      (GHC.Generics.Rec0 GHC.Types.Float)))
                               GHC.Prim.Any)
                            f1
                            r ->
                  m `cast`
                  (Data.Aeson.Types.Internal.NTCo:Parser[0]
                       <(GHC.Generics.:*:)
                          (GHC.Generics.S1
                             GeoShit.S1_0_0GeoshitResp (GHC.Generics.Rec0 GeoShit.Location))
                          (GHC.Generics.S1
                             GeoShit.S1_0_1GeoshitResp (GHC.Generics.Rec0 GHC.Types.Float))
                          GHC.Prim.Any>_R)
                    @ f1
                    @ r
                    kf
                    (\ a30 :: (GHC.Generics.:*:)
                                (GHC.Generics.S1
                                   GeoShit.S1_0_0GeoshitResp (GHC.Generics.Rec0 GeoShit.Location))
                                (GHC.Generics.S1
                                   GeoShit.S1_0_1GeoshitResp (GHC.Generics.Rec0 GHC.Types.Float))
                                GHC.Prim.Any ->
                     ks
                       a30
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.NTCo:M1[0]
                                      <GHC.Generics.C>_P
                                      <GeoShit.C1_0GeoshitResp>_P
                                      <GHC.Generics.S1
                                         GeoShit.S1_0_0GeoshitResp
                                         (GHC.Generics.Rec0 GeoShit.Location)
                                       GHC.Generics.:*: GHC.Generics.S1
                                                          GeoShit.S1_0_1GeoshitResp
                                                          (GHC.Generics.Rec0 GHC.Types.Float)>_R))
                            (Sym (GHC.Generics.NTCo:M1[0]
                                      <GHC.Generics.D>_P
                                      <GeoShit.D1GeoshitResp>_P
                                      <GHC.Generics.M1
                                         GHC.Generics.C
                                         GeoShit.C1_0GeoshitResp
                                         (GHC.Generics.S1
                                            GeoShit.S1_0_0GeoshitResp
                                            (GHC.Generics.Rec0 GeoShit.Location)
                                          GHC.Generics.:*: GHC.Generics.S1
                                                             GeoShit.S1_0_1GeoshitResp
                                                             (GHC.Generics.Rec0
                                                                GHC.Types.Float))>_R)) <GHC.Prim.Any>_N)))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                           <GHC.Generics.M1
                              GHC.Generics.D
                              GeoShit.D1GeoshitResp
                              (GHC.Generics.M1
                                 GHC.Generics.C
                                 GeoShit.C1_0GeoshitResp
                                 (GHC.Generics.S1
                                    GeoShit.S1_0_0GeoshitResp (GHC.Generics.Rec0 GeoShit.Location)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     GeoShit.S1_0_1GeoshitResp
                                                     (GHC.Generics.Rec0 GHC.Types.Float)))
                              GHC.Prim.Any>_R))) -}
16aefeffd5df553705d3a9ec7a59addb
  $fFromJSONGeoshitResp10 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.D
            GeoShit.D1Location
            (GHC.Generics.M1
               GHC.Generics.C
               GeoShit.C1_0Location
               (GHC.Generics.S1
                  GeoShit.S1_0_0Location (GHC.Generics.Rec0 GHC.Types.Float)
                GHC.Generics.:*: GHC.Generics.S1
                                   GeoShit.S1_0_1Location (GHC.Generics.Rec0 GHC.Types.Float)))
            GHC.Prim.Any)
  {- Arity: 1, Strictness: <L,1*U> -}
21109b302fffec4104167d7bcf2b6bec
  $fFromJSONGeoshitResp11 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success
         (GHC.Generics.S1
            GeoShit.S1_0_0GeoshitResp
            (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
            GHC.Prim.Any)
         f
         r
    -> f r
  {- Arity: 2,
     Unfolding: (\ @ (f :: * -> *)
                   @ r
                   kf :: Data.Aeson.Types.Internal.Failure f r
                   _ks :: Data.Aeson.Types.Internal.Success
                            (GHC.Generics.S1
                               GeoShit.S1_0_0GeoshitResp
                               (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
                               GHC.Prim.Any)
                            f
                            r ->
                 kf GeoShit.$fFromJSONGeoshitResp_msg1) -}
c95e806da1eaa30ed554b53eda046a5a
  $fFromJSONGeoshitResp12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GeoShit.$fFromJSONGeoshitResp13
                   GeoShit.$fFromJSONAccessPoint4) -}
692dfb5122a762e30fd7777584330511
  $fFromJSONGeoshitResp13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "location"#) -}
1d627613ccd196cb9d071c0086cf071d
  $fFromJSONGeoshitResp14 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   GeoShit.$fFromJSONGeoshitResp15) -}
6ff558dca5cc3b0eef03c540aa34dfed
  $fFromJSONGeoshitResp15 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 GeoShit.$fFromJSONGeoshitResp16
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   GeoShit.$fFromJSONAccessPoint7
                   GeoShit.$fFromJSONGeoshitResp13
                   0
                   ipv }) -}
76c3ab65fc09b066a0d7f368da207b67
  $fFromJSONGeoshitResp16 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
2b6e040f02c5897110e03e87733ae4b1
  $fFromJSONGeoshitResp2 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success GHC.Types.Float f r -> f r
  {- Arity: 2,
     Unfolding: (\ @ (f :: * -> *)
                   @ r
                   _kf :: Data.Aeson.Types.Internal.Failure f r
                   ks :: Data.Aeson.Types.Internal.Success GHC.Types.Float f r ->
                 ks GeoShit.$fFromJSONGeoshitResp_a63) -}
5dfafdc3ec7ab62630ef2bc8a8655bb3
  $fFromJSONGeoshitResp3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Float"#) -}
fed875e713fbf1c721c693371aae9dfb
  $fFromJSONGeoshitResp4 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success
         (GHC.Generics.S1
            GeoShit.S1_0_1GeoshitResp
            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
            GHC.Prim.Any)
         f
         r
    -> f r
  {- Arity: 2,
     Unfolding: (\ @ (f :: * -> *)
                   @ r
                   kf :: Data.Aeson.Types.Internal.Failure f r
                   _ks :: Data.Aeson.Types.Internal.Success
                            (GHC.Generics.S1
                               GeoShit.S1_0_1GeoshitResp
                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                               GHC.Prim.Any)
                            f
                            r ->
                 kf GeoShit.$fFromJSONGeoshitResp_msg3) -}
e45f5b94ad759f279159435350107e6d
  $fFromJSONGeoshitResp5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GeoShit.$fFromJSONGeoshitResp6
                   GeoShit.$fFromJSONAccessPoint4) -}
8f338fe3648c2bd52be87acf03dd186b
  $fFromJSONGeoshitResp6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "accuracy"#) -}
f3decd673bef5c30747a27d74d2fa37f
  $fFromJSONGeoshitResp7 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   GeoShit.$fFromJSONGeoshitResp8) -}
5599ea8892cdb55ee0e364a5779063aa
  $fFromJSONGeoshitResp8 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 GeoShit.$fFromJSONGeoshitResp9
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   GeoShit.$fFromJSONAccessPoint7
                   GeoShit.$fFromJSONGeoshitResp6
                   0
                   ipv }) -}
d90b9dc5fdbeb62dedd7e03984790a32
  $fFromJSONGeoshitResp9 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
fed875e713fbf1c721c693371aae9dfb
  $fFromJSONGeoshitResp_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser GeoShit.GeoshitResp
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ x :: Data.Aeson.Types.Internal.Value ->
                 let {
                   a15 :: Data.Aeson.Types.Internal.Parser
                            (GHC.Generics.M1
                               GHC.Generics.D
                               GeoShit.D1GeoshitResp
                               (GHC.Generics.M1
                                  GHC.Generics.C
                                  GeoShit.C1_0GeoshitResp
                                  (GHC.Generics.S1
                                     GeoShit.S1_0_0GeoshitResp (GHC.Generics.Rec0 GeoShit.Location)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      GeoShit.S1_0_1GeoshitResp
                                                      (GHC.Generics.Rec0 GHC.Types.Float)))
                               GHC.Prim.Any)
                   = GeoShit.$fFromJSONGeoshitResp1 x
                 } in
                 (\ @ (f1 :: * -> *)
                    @ r
                    kf :: Data.Aeson.Types.Internal.Failure f1 r
                    ks :: Data.Aeson.Types.Internal.Success GeoShit.GeoshitResp f1 r ->
                  a15
                    `cast`
                  (Data.Aeson.Types.Internal.NTCo:Parser[0]
                       (Sub (Sym (GeoShit.Rep_GeoshitResp[0])) <GHC.Prim.Any>_N))
                    @ f1
                    @ r
                    kf
                    (\ a30 :: GHC.Generics.Rep GeoShit.GeoshitResp GHC.Prim.Any ->
                     ks
                       (case a30
                               `cast`
                             (Trans
                                  (Sub (GeoShit.Rep_GeoshitResp[0]))
                                  (Trans
                                       (GHC.Generics.NTCo:M1[0]
                                            <GHC.Generics.D>_P
                                            <GeoShit.D1GeoshitResp>_P
                                            <GHC.Generics.M1
                                               GHC.Generics.C
                                               GeoShit.C1_0GeoshitResp
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  GeoShit.S1_0_0GeoshitResp
                                                  (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   GeoShit.S1_0_1GeoshitResp
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      GHC.Types.Float))>_R)
                                       (GHC.Generics.NTCo:M1[0]
                                            <GHC.Generics.C>_P
                                            <GeoShit.C1_0GeoshitResp>_P
                                            <GHC.Generics.M1
                                               GHC.Generics.S
                                               GeoShit.S1_0_0GeoshitResp
                                               (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
                                             GHC.Generics.:*: GHC.Generics.M1
                                                                GHC.Generics.S
                                                                GeoShit.S1_0_1GeoshitResp
                                                                (GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   GHC.Types.Float)>_R)) <GHC.Prim.Any>_N) of wild { GHC.Generics.:*: ds ds1 ->
                        GeoShit.GeoshitResp
                          ds
                            `cast`
                          (Trans
                               (GHC.Generics.NTCo:M1[0]
                                    <GHC.Generics.S>_P
                                    <GeoShit.S1_0_0GeoshitResp>_P
                                    <GHC.Generics.K1
                                       GHC.Generics.R GeoShit.Location>_R <GHC.Prim.Any>_N)
                               (GHC.Generics.NTCo:K1[0]
                                    <GHC.Generics.R>_P <GeoShit.Location>_R <GHC.Prim.Any>_P))
                          ds1
                            `cast`
                          (Trans
                               (GHC.Generics.NTCo:M1[0]
                                    <GHC.Generics.S>_P
                                    <GeoShit.S1_0_1GeoshitResp>_P
                                    <GHC.Generics.K1
                                       GHC.Generics.R GHC.Types.Float>_R <GHC.Prim.Any>_N)
                               (GHC.Generics.NTCo:K1[0]
                                    <GHC.Generics.R>_P <GHC.Types.Float>_R <GHC.Prim.Any>_P)) })))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                           <GeoShit.GeoshitResp>_R))) -}
4ac520bf9c132505cd9c2286202fff02
  $fFromJSONGeoshitResp_a63 :: GHC.Types.Float
  {- Unfolding: (case GHC.Prim.divideFloat#
                        __float 0.0
                        __float 0.0 of wild2 { DEFAULT ->
                 GHC.Types.F# wild2 }) -}
41a2a1e3d12733697c9d5c1430d896a5
  $fFromJSONGeoshitResp_msg1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "The key \""#
                   GeoShit.$fFromJSONGeoshitResp12) -}
8c640a18b1a2a546b5de6a151a005d1d
  $fFromJSONGeoshitResp_msg3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "The key \""#
                   GeoShit.$fFromJSONGeoshitResp5) -}
16aefeffd5df553705d3a9ec7a59addb
  $fFromJSONLocation ::
    Data.Aeson.Types.Class.FromJSON GeoShit.Location
  DFunId[0]
  {- Arity: 1, Strictness: <L,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fFromJSONLocation_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <GeoShit.Location>_N)) -}
16aefeffd5df553705d3a9ec7a59addb
  $fFromJSONLocation_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser GeoShit.Location
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ x :: Data.Aeson.Types.Internal.Value ->
                 let {
                   a15 :: Data.Aeson.Types.Internal.Parser
                            (GHC.Generics.M1
                               GHC.Generics.D
                               GeoShit.D1Location
                               (GHC.Generics.M1
                                  GHC.Generics.C
                                  GeoShit.C1_0Location
                                  (GHC.Generics.S1
                                     GeoShit.S1_0_0Location (GHC.Generics.Rec0 GHC.Types.Float)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      GeoShit.S1_0_1Location
                                                      (GHC.Generics.Rec0 GHC.Types.Float)))
                               GHC.Prim.Any)
                   = GeoShit.$fFromJSONGeoshitResp10 x
                 } in
                 (\ @ (f1 :: * -> *)
                    @ r
                    kf :: Data.Aeson.Types.Internal.Failure f1 r
                    ks :: Data.Aeson.Types.Internal.Success GeoShit.Location f1 r ->
                  a15
                    `cast`
                  (Data.Aeson.Types.Internal.NTCo:Parser[0]
                       (Sub (Sym (GeoShit.Rep_Location[0])) <GHC.Prim.Any>_N))
                    @ f1
                    @ r
                    kf
                    (\ a30 :: GHC.Generics.Rep GeoShit.Location GHC.Prim.Any ->
                     ks
                       (case a30
                               `cast`
                             (Trans
                                  (Sub (GeoShit.Rep_Location[0]))
                                  (Trans
                                       (GHC.Generics.NTCo:M1[0]
                                            <GHC.Generics.D>_P
                                            <GeoShit.D1Location>_P
                                            <GHC.Generics.M1
                                               GHC.Generics.C
                                               GeoShit.C1_0Location
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  GeoShit.S1_0_0Location
                                                  (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   GeoShit.S1_0_1Location
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      GHC.Types.Float))>_R)
                                       (GHC.Generics.NTCo:M1[0]
                                            <GHC.Generics.C>_P
                                            <GeoShit.C1_0Location>_P
                                            <GHC.Generics.M1
                                               GHC.Generics.S
                                               GeoShit.S1_0_0Location
                                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                                             GHC.Generics.:*: GHC.Generics.M1
                                                                GHC.Generics.S
                                                                GeoShit.S1_0_1Location
                                                                (GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   GHC.Types.Float)>_R)) <GHC.Prim.Any>_N) of wild { GHC.Generics.:*: ds ds1 ->
                        GeoShit.Location
                          ds
                            `cast`
                          (Trans
                               (GHC.Generics.NTCo:M1[0]
                                    <GHC.Generics.S>_P
                                    <GeoShit.S1_0_0Location>_P
                                    <GHC.Generics.K1
                                       GHC.Generics.R GHC.Types.Float>_R <GHC.Prim.Any>_N)
                               (GHC.Generics.NTCo:K1[0]
                                    <GHC.Generics.R>_P <GHC.Types.Float>_R <GHC.Prim.Any>_P))
                          ds1
                            `cast`
                          (Trans
                               (GHC.Generics.NTCo:M1[0]
                                    <GHC.Generics.S>_P
                                    <GeoShit.S1_0_1Location>_P
                                    <GHC.Generics.K1
                                       GHC.Generics.R GHC.Types.Float>_R <GHC.Prim.Any>_N)
                               (GHC.Generics.NTCo:K1[0]
                                    <GHC.Generics.R>_P <GHC.Types.Float>_R <GHC.Prim.Any>_P)) })))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                           <GeoShit.Location>_R))) -}
5009ef72efb4c0c48c50da051026bce8
  $fGenericAccessPoint :: GHC.Generics.Generic GeoShit.AccessPoint
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.AccessPoint
                  GeoShit.$fGenericAccessPoint_$cfrom
                  GeoShit.$fGenericAccessPoint_$cto -}
5009ef72efb4c0c48c50da051026bce8
  $fGenericAccessPoint_$cfrom ::
    GeoShit.AccessPoint -> GHC.Generics.Rep GeoShit.AccessPoint x
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: GeoShit.AccessPoint ->
                 case ds of wild { GeoShit.AccessPoint g1 ->
                 g1
                   `cast`
                 (Trans
                      (Sym (GHC.Generics.NTCo:K1[0]
                                <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                      (Trans
                           (Sym (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.S>_P
                                     <GeoShit.S1_0_0AccessPoint>_P
                                     <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R))
                           (Trans
                                (Sym (GHC.Generics.NTCo:M1[0]
                                          <GHC.Generics.C>_P
                                          <GeoShit.C1_0AccessPoint>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             GeoShit.S1_0_0AccessPoint
                                             (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_R))
                                (Trans
                                     (Sym (GHC.Generics.NTCo:M1[0]
                                               <GHC.Generics.D>_P
                                               <GeoShit.D1AccessPoint>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.C
                                                  GeoShit.C1_0AccessPoint
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     GeoShit.S1_0_0AccessPoint
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R GHC.Base.String))>_R))
                                     (Sub (Sym (GeoShit.Rep_AccessPoint[0]))))) <x>_N)) }) -}
5009ef72efb4c0c48c50da051026bce8
  $fGenericAccessPoint_$cto ::
    GHC.Generics.Rep GeoShit.AccessPoint x -> GeoShit.AccessPoint
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ x ds :: GHC.Generics.Rep GeoShit.AccessPoint x ->
                 GeoShit.AccessPoint
                   ds
                     `cast`
                   (Trans
                        (Trans
                             (Sub (GeoShit.Rep_AccessPoint[0]))
                             (Trans
                                  (GHC.Generics.NTCo:M1[0]
                                       <GHC.Generics.D>_P
                                       <GeoShit.D1AccessPoint>_P
                                       <GHC.Generics.M1
                                          GHC.Generics.C
                                          GeoShit.C1_0AccessPoint
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             GeoShit.S1_0_0AccessPoint
                                             (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))>_R)
                                  (Trans
                                       (GHC.Generics.NTCo:M1[0]
                                            <GHC.Generics.C>_P
                                            <GeoShit.C1_0AccessPoint>_P
                                            <GHC.Generics.M1
                                               GHC.Generics.S
                                               GeoShit.S1_0_0AccessPoint
                                               (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_R)
                                       (GHC.Generics.NTCo:M1[0]
                                            <GHC.Generics.S>_P
                                            <GeoShit.S1_0_0AccessPoint>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R GHC.Base.String>_R))) <x>_N)
                        (GHC.Generics.NTCo:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))) -}
35f5bdd843de7965b649b0b1a138e613
  $fGenericGeoshitReq :: GHC.Generics.Generic GeoShit.GeoshitReq
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.GeoshitReq
                  GeoShit.$fGenericGeoshitReq_$cfrom
                  GeoShit.$fGenericGeoshitReq_$cto -}
35f5bdd843de7965b649b0b1a138e613
  $fGenericGeoshitReq_$cfrom ::
    GeoShit.GeoshitReq -> GHC.Generics.Rep GeoShit.GeoshitReq x
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: GeoShit.GeoshitReq ->
                 case ds of wild { GeoShit.GeoshitReq g1 ->
                 g1
                   `cast`
                 (Trans
                      (Sym (GHC.Generics.NTCo:K1[0]
                                <GHC.Generics.R>_P <[GeoShit.AccessPoint]>_R <x>_P))
                      (Trans
                           (Sym (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.S>_P
                                     <GeoShit.S1_0_0GeoshitReq>_P
                                     <GHC.Generics.K1 GHC.Generics.R [GeoShit.AccessPoint]>_R))
                           (Trans
                                (Sym (GHC.Generics.NTCo:M1[0]
                                          <GHC.Generics.C>_P
                                          <GeoShit.C1_0GeoshitReq>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             GeoShit.S1_0_0GeoshitReq
                                             (GHC.Generics.K1
                                                GHC.Generics.R [GeoShit.AccessPoint])>_R))
                                (Trans
                                     (Sym (GHC.Generics.NTCo:M1[0]
                                               <GHC.Generics.D>_P
                                               <GeoShit.D1GeoshitReq>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.C
                                                  GeoShit.C1_0GeoshitReq
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     GeoShit.S1_0_0GeoshitReq
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R [GeoShit.AccessPoint]))>_R))
                                     (Sub (Sym (GeoShit.Rep_GeoshitReq[0]))))) <x>_N)) }) -}
35f5bdd843de7965b649b0b1a138e613
  $fGenericGeoshitReq_$cto ::
    GHC.Generics.Rep GeoShit.GeoshitReq x -> GeoShit.GeoshitReq
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ x ds :: GHC.Generics.Rep GeoShit.GeoshitReq x ->
                 GeoShit.GeoshitReq
                   ds
                     `cast`
                   (Trans
                        (Trans
                             (Sub (GeoShit.Rep_GeoshitReq[0]))
                             (Trans
                                  (GHC.Generics.NTCo:M1[0]
                                       <GHC.Generics.D>_P
                                       <GeoShit.D1GeoshitReq>_P
                                       <GHC.Generics.M1
                                          GHC.Generics.C
                                          GeoShit.C1_0GeoshitReq
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             GeoShit.S1_0_0GeoshitReq
                                             (GHC.Generics.K1
                                                GHC.Generics.R [GeoShit.AccessPoint]))>_R)
                                  (Trans
                                       (GHC.Generics.NTCo:M1[0]
                                            <GHC.Generics.C>_P
                                            <GeoShit.C1_0GeoshitReq>_P
                                            <GHC.Generics.M1
                                               GHC.Generics.S
                                               GeoShit.S1_0_0GeoshitReq
                                               (GHC.Generics.K1
                                                  GHC.Generics.R [GeoShit.AccessPoint])>_R)
                                       (GHC.Generics.NTCo:M1[0]
                                            <GHC.Generics.S>_P
                                            <GeoShit.S1_0_0GeoshitReq>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R [GeoShit.AccessPoint]>_R))) <x>_N)
                        (GHC.Generics.NTCo:K1[0]
                             <GHC.Generics.R>_P <[GeoShit.AccessPoint]>_R <x>_P))) -}
fed875e713fbf1c721c693371aae9dfb
  $fGenericGeoshitResp :: GHC.Generics.Generic GeoShit.GeoshitResp
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.GeoshitResp
                  GeoShit.$fGenericGeoshitResp_$cfrom
                  GeoShit.$fGenericGeoshitResp_$cto -}
fed875e713fbf1c721c693371aae9dfb
  $fGenericGeoshitResp_$cfrom ::
    GeoShit.GeoshitResp -> GHC.Generics.Rep GeoShit.GeoshitResp x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: GeoShit.GeoshitResp ->
                 case ds of wild { GeoShit.GeoshitResp g1 g2 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         GeoShit.S1_0_0GeoshitResp
                         (GHC.Generics.K1 GHC.Generics.R GeoShit.Location))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         GeoShit.S1_0_1GeoshitResp
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float))
                    @ x
                    g1
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P <GeoShit.Location>_R <x>_P))
                         (Sym (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <GeoShit.S1_0_0GeoshitResp>_P
                                   <GHC.Generics.K1 GHC.Generics.R GeoShit.Location>_R) <x>_N))
                    g2
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P <GHC.Types.Float>_R <x>_P))
                         (Sym (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <GeoShit.S1_0_1GeoshitResp>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Float>_R) <x>_N)))
                   `cast`
                 (Trans
                      (Sym (GHC.Generics.NTCo:M1[0]
                                <GHC.Generics.C>_P
                                <GeoShit.C1_0GeoshitResp>_P
                                <GHC.Generics.M1
                                   GHC.Generics.S
                                   GeoShit.S1_0_0GeoshitResp
                                   (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    GeoShit.S1_0_1GeoshitResp
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Types.Float)>_R))
                      (Trans
                           (Sym (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.D>_P
                                     <GeoShit.D1GeoshitResp>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        GeoShit.C1_0GeoshitResp
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           GeoShit.S1_0_0GeoshitResp
                                           (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            GeoShit.S1_0_1GeoshitResp
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Float))>_R))
                           (Sub (Sym (GeoShit.Rep_GeoshitResp[0])))) <x>_N) }) -}
fed875e713fbf1c721c693371aae9dfb
  $fGenericGeoshitResp_$cto ::
    GHC.Generics.Rep GeoShit.GeoshitResp x -> GeoShit.GeoshitResp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: GHC.Generics.Rep GeoShit.GeoshitResp x ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (GeoShit.Rep_GeoshitResp[0]))
                           (Trans
                                (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.D>_P
                                     <GeoShit.D1GeoshitResp>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        GeoShit.C1_0GeoshitResp
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           GeoShit.S1_0_0GeoshitResp
                                           (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            GeoShit.S1_0_1GeoshitResp
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Float))>_R)
                                (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.C>_P
                                     <GeoShit.C1_0GeoshitResp>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        GeoShit.S1_0_0GeoshitResp
                                        (GHC.Generics.K1 GHC.Generics.R GeoShit.Location)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         GeoShit.S1_0_1GeoshitResp
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Types.Float)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 GeoShit.GeoshitResp
                   ds1
                     `cast`
                   (Trans
                        (GHC.Generics.NTCo:M1[0]
                             <GHC.Generics.S>_P
                             <GeoShit.S1_0_0GeoshitResp>_P
                             <GHC.Generics.K1 GHC.Generics.R GeoShit.Location>_R <x>_N)
                        (GHC.Generics.NTCo:K1[0]
                             <GHC.Generics.R>_P <GeoShit.Location>_R <x>_P))
                   ds2
                     `cast`
                   (Trans
                        (GHC.Generics.NTCo:M1[0]
                             <GHC.Generics.S>_P
                             <GeoShit.S1_0_1GeoshitResp>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Float>_R <x>_N)
                        (GHC.Generics.NTCo:K1[0]
                             <GHC.Generics.R>_P <GHC.Types.Float>_R <x>_P)) }) -}
16aefeffd5df553705d3a9ec7a59addb
  $fGenericLocation :: GHC.Generics.Generic GeoShit.Location
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.Location
                  GeoShit.$fGenericLocation_$cfrom
                  GeoShit.$fGenericLocation_$cto -}
16aefeffd5df553705d3a9ec7a59addb
  $fGenericLocation_$cfrom ::
    GeoShit.Location -> GHC.Generics.Rep GeoShit.Location x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: GeoShit.Location ->
                 case ds of wild { GeoShit.Location g1 g2 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         GeoShit.S1_0_0Location
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         GeoShit.S1_0_1Location
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float))
                    @ x
                    g1
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P <GHC.Types.Float>_R <x>_P))
                         (Sym (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <GeoShit.S1_0_0Location>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Float>_R) <x>_N))
                    g2
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P <GHC.Types.Float>_R <x>_P))
                         (Sym (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <GeoShit.S1_0_1Location>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Float>_R) <x>_N)))
                   `cast`
                 (Trans
                      (Sym (GHC.Generics.NTCo:M1[0]
                                <GHC.Generics.C>_P
                                <GeoShit.C1_0Location>_P
                                <GHC.Generics.M1
                                   GHC.Generics.S
                                   GeoShit.S1_0_0Location
                                   (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    GeoShit.S1_0_1Location
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Types.Float)>_R))
                      (Trans
                           (Sym (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.D>_P
                                     <GeoShit.D1Location>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        GeoShit.C1_0Location
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           GeoShit.S1_0_0Location
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            GeoShit.S1_0_1Location
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Float))>_R))
                           (Sub (Sym (GeoShit.Rep_Location[0])))) <x>_N) }) -}
16aefeffd5df553705d3a9ec7a59addb
  $fGenericLocation_$cto ::
    GHC.Generics.Rep GeoShit.Location x -> GeoShit.Location
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: GHC.Generics.Rep GeoShit.Location x ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (GeoShit.Rep_Location[0]))
                           (Trans
                                (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.D>_P
                                     <GeoShit.D1Location>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        GeoShit.C1_0Location
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           GeoShit.S1_0_0Location
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            GeoShit.S1_0_1Location
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Float))>_R)
                                (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.C>_P
                                     <GeoShit.C1_0Location>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        GeoShit.S1_0_0Location
                                        (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         GeoShit.S1_0_1Location
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Types.Float)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 GeoShit.Location
                   ds1
                     `cast`
                   (Trans
                        (GHC.Generics.NTCo:M1[0]
                             <GHC.Generics.S>_P
                             <GeoShit.S1_0_0Location>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Float>_R <x>_N)
                        (GHC.Generics.NTCo:K1[0]
                             <GHC.Generics.R>_P <GHC.Types.Float>_R <x>_P))
                   ds2
                     `cast`
                   (Trans
                        (GHC.Generics.NTCo:M1[0]
                             <GHC.Generics.S>_P
                             <GeoShit.S1_0_1Location>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Float>_R <x>_N)
                        (GHC.Generics.NTCo:K1[0]
                             <GHC.Generics.R>_P <GHC.Types.Float>_R <x>_P)) }) -}
5009ef72efb4c0c48c50da051026bce8
  $fSelectorAccessPoint ::
    GHC.Generics.Selector GeoShit.S1_0_0AccessPoint
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fSelectorAccessPoint_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0]
                          <GeoShit.S1_0_0AccessPoint>_N)) -}
5009ef72efb4c0c48c50da051026bce8
  $fSelectorAccessPoint_$cselName ::
    t GeoShit.S1_0_0AccessPoint f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.S1_0_0AccessPoint f a15 ->
                 GeoShit.$fFromJSONAccessPoint5) -}
35f5bdd843de7965b649b0b1a138e613
  $fSelectorGeoshitReq ::
    GHC.Generics.Selector GeoShit.S1_0_0GeoshitReq
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fSelectorGeoshitReq_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0]
                          <GeoShit.S1_0_0GeoshitReq>_N)) -}
35f5bdd843de7965b649b0b1a138e613
  $fSelectorGeoshitReq_$cselName ::
    t GeoShit.S1_0_0GeoshitReq f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.S1_0_0GeoshitReq f a15 ->
                 GeoShit.$fFromJSONGeoshitReq5) -}
e21c1d2fdb8dc5365ab089b3399b493c
  $fSelectorGeoshitResp ::
    GHC.Generics.Selector GeoShit.S1_0_0GeoshitResp
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fSelectorGeoshitResp_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0]
                          <GeoShit.S1_0_0GeoshitResp>_N)) -}
fed875e713fbf1c721c693371aae9dfb
  $fSelectorGeoshitResp0 ::
    GHC.Generics.Selector GeoShit.S1_0_1GeoshitResp
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fSelectorGeoshitResp0_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0]
                          <GeoShit.S1_0_1GeoshitResp>_N)) -}
fed875e713fbf1c721c693371aae9dfb
  $fSelectorGeoshitResp0_$cselName ::
    t GeoShit.S1_0_1GeoshitResp f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.S1_0_1GeoshitResp f a15 ->
                 GeoShit.$fFromJSONGeoshitResp6) -}
e21c1d2fdb8dc5365ab089b3399b493c
  $fSelectorGeoshitResp_$cselName ::
    t GeoShit.S1_0_0GeoshitResp f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.S1_0_0GeoshitResp f a15 ->
                 GeoShit.$fFromJSONGeoshitResp13) -}
3839e72bf85ab1d1fa94c512862c4973
  $fSelectorLocation :: GHC.Generics.Selector GeoShit.S1_0_0Location
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fSelectorLocation_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0] <GeoShit.S1_0_0Location>_N)) -}
16aefeffd5df553705d3a9ec7a59addb
  $fSelectorLocation0 :: GHC.Generics.Selector GeoShit.S1_0_1Location
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fSelectorLocation0_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0] <GeoShit.S1_0_1Location>_N)) -}
16aefeffd5df553705d3a9ec7a59addb
  $fSelectorLocation0_$cselName ::
    t GeoShit.S1_0_1Location f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.S1_0_1Location f a15 ->
                 GeoShit.$fSelectorLocation2) -}
d5bf72644f8f7674ac0317f59479ee32
  $fSelectorLocation1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "lat"#) -}
e82d9c9f210607d9d9084add4a09703e
  $fSelectorLocation2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "lng"#) -}
3839e72bf85ab1d1fa94c512862c4973
  $fSelectorLocation_$cselName ::
    t GeoShit.S1_0_0Location f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a15
                   ds :: t GeoShit.S1_0_0Location f a15 ->
                 GeoShit.$fSelectorLocation1) -}
5009ef72efb4c0c48c50da051026bce8
  $fShowAccessPoint :: GHC.Show.Show GeoShit.AccessPoint
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.AccessPoint
                  GeoShit.$fShowAccessPoint_$cshowsPrec
                  GeoShit.$fShowAccessPoint_$cshow
                  GeoShit.$fShowAccessPoint_$cshowList -}
5009ef72efb4c0c48c50da051026bce8
  $fShowAccessPoint1 :: GeoShit.AccessPoint -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GeoShit.AccessPoint w1 :: GHC.Base.String ->
                 case w of ww { GeoShit.AccessPoint ww1 ->
                 GeoShit.$w$cshowsPrec 0 ww1 w1 }) -}
773056cd1f0a68cac5141e029ec25b6a
  $fShowAccessPoint2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
479cf122201439f63dcfc3a19f8969ff
  $fShowAccessPoint3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "address = "#) -}
eea7621ce44db65d3ddeb9c9ba46d9c4
  $fShowAccessPoint4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AccessPoint {"#) -}
5009ef72efb4c0c48c50da051026bce8
  $fShowAccessPoint_$cshow :: GeoShit.AccessPoint -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GeoShit.AccessPoint ->
                 GeoShit.$fShowAccessPoint_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5009ef72efb4c0c48c50da051026bce8
  $fShowAccessPoint_$cshowList ::
    [GeoShit.AccessPoint] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GeoShit.AccessPoint
                   GeoShit.$fShowAccessPoint1) -}
5009ef72efb4c0c48c50da051026bce8
  $fShowAccessPoint_$cshowsPrec ::
    GHC.Types.Int -> GeoShit.AccessPoint -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GeoShit.AccessPoint
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GeoShit.AccessPoint ww3 ->
                 GeoShit.$w$cshowsPrec ww1 ww3 w2 } }) -}
35f5bdd843de7965b649b0b1a138e613
  $fShowGeoshitReq :: GHC.Show.Show GeoShit.GeoshitReq
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.GeoshitReq
                  GeoShit.$fShowGeoshitReq_$cshowsPrec
                  GeoShit.$fShowGeoshitReq_$cshow
                  GeoShit.$fShowGeoshitReq_$cshowList -}
35f5bdd843de7965b649b0b1a138e613
  $fShowGeoshitReq1 :: GeoShit.GeoshitReq -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GeoShit.GeoshitReq w1 :: GHC.Base.String ->
                 case w of ww { GeoShit.GeoshitReq ww1 ->
                 GeoShit.$w$cshowsPrec1 0 ww1 w1 }) -}
66abd8d45c8594361ac54cfbc295d281
  $fShowGeoshitReq2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "wifiAPs = "#) -}
a141c470bb96c46bb2383227a8e23c7f
  $fShowGeoshitReq3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GeoshitReq {"#) -}
35f5bdd843de7965b649b0b1a138e613
  $fShowGeoshitReq_$cshow :: GeoShit.GeoshitReq -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GeoShit.GeoshitReq ->
                 GeoShit.$fShowGeoshitReq_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
35f5bdd843de7965b649b0b1a138e613
  $fShowGeoshitReq_$cshowList ::
    [GeoShit.GeoshitReq] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GeoShit.GeoshitReq
                   GeoShit.$fShowGeoshitReq1) -}
35f5bdd843de7965b649b0b1a138e613
  $fShowGeoshitReq_$cshowsPrec ::
    GHC.Types.Int -> GeoShit.GeoshitReq -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GeoShit.GeoshitReq
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GeoShit.GeoshitReq ww3 ->
                 GeoShit.$w$cshowsPrec1 ww1 ww3 w2 } }) -}
fed875e713fbf1c721c693371aae9dfb
  $fShowGeoshitResp :: GHC.Show.Show GeoShit.GeoshitResp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.GeoshitResp
                  GeoShit.$fShowGeoshitResp_$cshowsPrec
                  GeoShit.$fShowGeoshitResp_$cshow
                  GeoShit.$fShowGeoshitResp_$cshowList -}
fed875e713fbf1c721c693371aae9dfb
  $fShowGeoshitResp1 :: GeoShit.GeoshitResp -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: GeoShit.GeoshitResp ->
                 case w of ww { GeoShit.GeoshitResp ww1 ww2 ->
                 GeoShit.$w$cshowsPrec2 0 ww1 ww2 }) -}
b41e7851f3c1fc9d5e56b3524b23b6b7
  $fShowGeoshitResp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "accuracy = "#) -}
40f9ab99d4efe7c41148ef8b966819f3
  $fShowGeoshitResp3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
a8063c56821a43c824e5e163b39957c5
  $fShowGeoshitResp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "location = "#) -}
9f4fa1c86e92ba4e2b4333178a89b87f
  $fShowGeoshitResp5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GeoshitResp {"#) -}
804faeec934b452a98d708503e4b05a2
  $fShowGeoshitResp6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
752198c134e72a00de9567378706f7c5
  $fShowGeoshitResp7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "lng = "#) -}
d588024415ea86ce44f5f6cd5d5069ad
  $fShowGeoshitResp8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "lat = "#) -}
84359bf5846f195448d83ebb215a3ace
  $fShowGeoshitResp9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Location {"#) -}
fed875e713fbf1c721c693371aae9dfb
  $fShowGeoshitResp_$cshow :: GeoShit.GeoshitResp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GeoShit.GeoshitResp ->
                 GeoShit.$fShowGeoshitResp_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fed875e713fbf1c721c693371aae9dfb
  $fShowGeoshitResp_$cshowList ::
    [GeoShit.GeoshitResp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GeoShit.GeoshitResp
                   GeoShit.$fShowGeoshitResp1) -}
fed875e713fbf1c721c693371aae9dfb
  $fShowGeoshitResp_$cshowsPrec ::
    GHC.Types.Int -> GeoShit.GeoshitResp -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GeoShit.GeoshitResp ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GeoShit.GeoshitResp ww3 ww4 ->
                 GeoShit.$w$cshowsPrec2 ww1 ww3 ww4 } }) -}
16aefeffd5df553705d3a9ec7a59addb
  $fShowLocation :: GHC.Show.Show GeoShit.Location
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GeoShit.Location
                  GeoShit.$fShowLocation_$cshowsPrec
                  GeoShit.$fShowLocation_$cshow
                  GeoShit.$fShowLocation_$cshowList -}
16aefeffd5df553705d3a9ec7a59addb
  $fShowLocation1 :: GeoShit.Location -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: GeoShit.Location ->
                 case w of ww { GeoShit.Location ww1 ww2 ->
                 GeoShit.$w$cshowsPrec3 0 ww1 ww2 }) -}
16aefeffd5df553705d3a9ec7a59addb
  $fShowLocation_$cshow :: GeoShit.Location -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GeoShit.Location ->
                 GeoShit.$fShowLocation_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
16aefeffd5df553705d3a9ec7a59addb
  $fShowLocation_$cshowList :: [GeoShit.Location] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GeoShit.Location
                   GeoShit.$fShowLocation1) -}
16aefeffd5df553705d3a9ec7a59addb
  $fShowLocation_$cshowsPrec ::
    GHC.Types.Int -> GeoShit.Location -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GeoShit.Location ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GeoShit.Location ww3 ww4 ->
                 GeoShit.$w$cshowsPrec3 ww1 ww3 ww4 } }) -}
5009ef72efb4c0c48c50da051026bce8
  $fToJSONAccessPoint ::
    Data.Aeson.Types.Class.ToJSON GeoShit.AccessPoint
  DFunId[0]
  {- Arity: 1, Strictness: <L,1*U(1*U)>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fToJSONAccessPoint_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <GeoShit.AccessPoint>_N)) -}
21b6ee72cd7a5cfe46831aef83f3aa06
  $fToJSONAccessPoint1 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
8e7d1d97975212cb3afee3cef9815de7
  $fToJSONAccessPoint2 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   GeoShit.$fToJSONAccessPoint3) -}
c30921afd0b0d54e0c170b3ad22c1a07
  $fToJSONAccessPoint3 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 GeoShit.$fToJSONAccessPoint4
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   GeoShit.$fFromJSONAccessPoint7
                   GeoShit.$fFromJSONAccessPoint5
                   0
                   ipv }) -}
902cc5f89706cb80d6595a40145dfea7
  $fToJSONAccessPoint4 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
5009ef72efb4c0c48c50da051026bce8
  $fToJSONAccessPoint_$ctoJSON ::
    GeoShit.AccessPoint -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <L,1*U(1*U)>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GeoShit.AccessPoint ->
                 case GeoShit.$w$ctoJSON w of ww { (##) ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
35f5bdd843de7965b649b0b1a138e613
  $fToJSONGeoshitReq ::
    Data.Aeson.Types.Class.ToJSON GeoShit.GeoshitReq
  DFunId[0]
  {- Arity: 1, Strictness: <L,1*U(1*U)>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fToJSONGeoshitReq_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <GeoShit.GeoshitReq>_N)) -}
35f5bdd843de7965b649b0b1a138e613
  $fToJSONGeoshitReq1 ::
    GHC.Generics.M1
      GHC.Generics.D
      GeoShit.D1GeoshitReq
      (GHC.Generics.M1
         GHC.Generics.C
         GeoShit.C1_0GeoshitReq
         (GHC.Generics.S1
            GeoShit.S1_0_0GeoshitReq
            (GHC.Generics.Rec0 [GeoShit.AccessPoint])))
      GHC.Prim.Any
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <L,1*U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Generics.M1
                          GHC.Generics.D
                          GeoShit.D1GeoshitReq
                          (GHC.Generics.M1
                             GHC.Generics.C
                             GeoShit.C1_0GeoshitReq
                             (GHC.Generics.S1
                                GeoShit.S1_0_0GeoshitReq
                                (GHC.Generics.Rec0 [GeoShit.AccessPoint])))
                          GHC.Prim.Any ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (GeoShit.$fToJSONGeoshitReq4,
                            GeoShit.$fToJSONGeoshitReq2
                              w `cast`
                              (Trans
                                   (Trans
                                        (GHC.Generics.NTCo:M1[0]
                                             <GHC.Generics.D>_P
                                             <GeoShit.D1GeoshitReq>_P
                                             <GHC.Generics.M1
                                                GHC.Generics.C
                                                GeoShit.C1_0GeoshitReq
                                                (GHC.Generics.S1
                                                   GeoShit.S1_0_0GeoshitReq
                                                   (GHC.Generics.Rec0 [GeoShit.AccessPoint]))>_R)
                                        (Trans
                                             (GHC.Generics.NTCo:M1[0]
                                                  <GHC.Generics.C>_P
                                                  <GeoShit.C1_0GeoshitReq>_P
                                                  <GHC.Generics.M1
                                                     GHC.Generics.S
                                                     GeoShit.S1_0_0GeoshitReq
                                                     (GHC.Generics.Rec0 [GeoShit.AccessPoint])>_R)
                                             (GHC.Generics.NTCo:M1[0]
                                                  <GHC.Generics.S>_P
                                                  <GeoShit.S1_0_0GeoshitReq>_P
                                                  <GHC.Generics.K1
                                                     GHC.Generics.R
                                                     [GeoShit.AccessPoint]>_R)) <GHC.Prim.Any>_N)
                                   (GHC.Generics.NTCo:K1[0]
                                        <GHC.Generics.R>_P
                                        <[GeoShit.AccessPoint]>_R
                                        <GHC.Prim.Any>_P)))
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 Data.Aeson.Types.Internal.Object dt }) -}
7a944c1c64be9c60503fbb8c9645741c
  $fToJSONGeoshitReq2 ::
    [GeoShit.AccessPoint] -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GeoShit.AccessPoint] ->
                 case GeoShit.$wa1 w of ww { (##) ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
895c882049c92283c1e24c4e15886dbe
  $fToJSONGeoshitReq3 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
          Data.Aeson.Types.Internal.Value,
        GHC.Types.Int)
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
             Data.Aeson.Types.Internal.Value,
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><L,U> -}
94dea1a61a0e1105557e814583832dda
  $fToJSONGeoshitReq4 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   GeoShit.$fToJSONGeoshitReq5) -}
d7c4f4a0fb013ea8c7fb908d1d5a89e1
  $fToJSONGeoshitReq5 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 GeoShit.$fToJSONGeoshitReq6
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   GeoShit.$fFromJSONAccessPoint7
                   GeoShit.$fFromJSONGeoshitReq5
                   0
                   ipv }) -}
525fe085aea800a74c9a391ab5cad531
  $fToJSONGeoshitReq6 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
35f5bdd843de7965b649b0b1a138e613
  $fToJSONGeoshitReq_$ctoJSON ::
    GeoShit.GeoshitReq -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <L,1*U(1*U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GeoShit.GeoshitReq ->
                 GeoShit.$fToJSONGeoshitReq1
                   (case x of wild { GeoShit.GeoshitReq g1 ->
                    g1
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P <[GeoShit.AccessPoint]>_R <GHC.Prim.Any>_P))
                         (Trans
                              (Sym (GHC.Generics.NTCo:M1[0]
                                        <GHC.Generics.S>_P
                                        <GeoShit.S1_0_0GeoshitReq>_P
                                        <GHC.Generics.K1 GHC.Generics.R [GeoShit.AccessPoint]>_R))
                              (Trans
                                   (Sym (GHC.Generics.NTCo:M1[0]
                                             <GHC.Generics.C>_P
                                             <GeoShit.C1_0GeoshitReq>_P
                                             <GHC.Generics.M1
                                                GHC.Generics.S
                                                GeoShit.S1_0_0GeoshitReq
                                                (GHC.Generics.K1
                                                   GHC.Generics.R [GeoShit.AccessPoint])>_R))
                                   (Sym (GHC.Generics.NTCo:M1[0]
                                             <GHC.Generics.D>_P
                                             <GeoShit.D1GeoshitReq>_P
                                             <GHC.Generics.M1
                                                GHC.Generics.C
                                                GeoShit.C1_0GeoshitReq
                                                (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   GeoShit.S1_0_0GeoshitReq
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      [GeoShit.AccessPoint]))>_R))) <GHC.Prim.Any>_N)) })) -}
fed875e713fbf1c721c693371aae9dfb
  $fToJSONGeoshitResp ::
    Data.Aeson.Types.Class.ToJSON GeoShit.GeoshitResp
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(U))>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fToJSONGeoshitResp_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <GeoShit.GeoshitResp>_N)) -}
fed875e713fbf1c721c693371aae9dfb
  $fToJSONGeoshitResp1 ::
    Data.Aeson.Types.Internal.Options
    -> GHC.Generics.S1
         GeoShit.S1_0_1GeoshitResp
         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
         a8
    -> [Data.Aeson.Types.Internal.Pair]
    -> [Data.Aeson.Types.Internal.Pair]
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A,A,A,A)><L,1*U(U)>,
     Unfolding: (\ @ a15
                   eta :: Data.Aeson.Types.Internal.Options
                   eta1 :: GHC.Generics.S1
                             GeoShit.S1_0_1GeoshitResp
                             (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                             a15 ->
                 GHC.Types.:
                   @ Data.Aeson.Types.Internal.Pair
                   (case eta of wild { Data.Aeson.Types.Internal.Options ds1 ds2 ds3 ds4 ds5 ->
                    case ds1 GeoShit.$fFromJSONGeoshitResp6 of dt { DEFAULT ->
                    GHC.ST.runSTRep
                      @ Data.Text.Internal.Text
                      (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                       case GHC.Prim.newByteArray# @ s1 8 s2 of ds7 { (#,#) ipv ipv1 ->
                       GeoShit.$fToJSONGeoshitResp2
                         @ s1
                         (Data.Text.Array.MArray @ s1 ipv1)
                         GeoShit.$fFromJSONAccessPoint7
                         dt
                         0
                         ipv }) } },
                    case eta1
                           `cast`
                         (Trans
                              (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <GeoShit.S1_0_1GeoshitResp>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Float>_R <a15>_N)
                              (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P
                                   <GHC.Types.Float>_R
                                   <a15>_P)) of ds { GHC.Types.F# ds1 ->
                    case {__pkg_ccall base-4.8.2.0 isFloatNaN GHC.Prim.Float#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                           ds1
                           GHC.Prim.realWorld# of wild { (#,#) ds2 ds3 ->
                    case ds3 of wild1 {
                      DEFAULT -> Data.Aeson.Types.Internal.Null
                      0
                      -> case {__pkg_ccall base-4.8.2.0 isFloatInfinite GHC.Prim.Float#
                                                                        -> GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                        -> (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              GHC.Prim.Int# #)}
                                ds1
                                GHC.Prim.realWorld# of wild2 { (#,#) ds4 ds5 ->
                         case ds5 of wild3 {
                           DEFAULT -> Data.Aeson.Types.Internal.Null
                           0
                           -> case Data.Scientific.$wfromFloatDigits
                                     @ GHC.Types.Float
                                     GHC.Float.$fRealFloatFloat
                                     ds of ww1 { (#,#) ww2 ww3 ->
                              Data.Aeson.Types.Internal.Number
                                (Data.Scientific.Scientific ww2 ww3) } } } } } })) -}
6e7eff9c7c4fd5267f7302f9d0dd2dcf
  $fToJSONGeoshitResp2 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
16aefeffd5df553705d3a9ec7a59addb
  $fToJSONGeoshitResp3 ::
    Data.Aeson.Types.Internal.Options
    -> GHC.Generics.S1
         GeoShit.S1_0_1Location
         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
         a8
    -> [Data.Aeson.Types.Internal.Pair]
    -> [Data.Aeson.Types.Internal.Pair]
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A,A,A,A)><L,1*U(U)>,
     Unfolding: (\ @ a15
                   eta :: Data.Aeson.Types.Internal.Options
                   eta1 :: GHC.Generics.S1
                             GeoShit.S1_0_1Location
                             (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                             a15 ->
                 GHC.Types.:
                   @ Data.Aeson.Types.Internal.Pair
                   (case eta of wild { Data.Aeson.Types.Internal.Options ds1 ds2 ds3 ds4 ds5 ->
                    case ds1 GeoShit.$fSelectorLocation2 of dt { DEFAULT ->
                    GHC.ST.runSTRep
                      @ Data.Text.Internal.Text
                      (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                       case GHC.Prim.newByteArray# @ s1 8 s2 of ds7 { (#,#) ipv ipv1 ->
                       GeoShit.$fToJSONGeoshitResp4
                         @ s1
                         (Data.Text.Array.MArray @ s1 ipv1)
                         GeoShit.$fFromJSONAccessPoint7
                         dt
                         0
                         ipv }) } },
                    case eta1
                           `cast`
                         (Trans
                              (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <GeoShit.S1_0_1Location>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Float>_R <a15>_N)
                              (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P
                                   <GHC.Types.Float>_R
                                   <a15>_P)) of ds { GHC.Types.F# ds1 ->
                    case {__pkg_ccall base-4.8.2.0 isFloatNaN GHC.Prim.Float#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                           ds1
                           GHC.Prim.realWorld# of wild { (#,#) ds2 ds3 ->
                    case ds3 of wild1 {
                      DEFAULT -> Data.Aeson.Types.Internal.Null
                      0
                      -> case {__pkg_ccall base-4.8.2.0 isFloatInfinite GHC.Prim.Float#
                                                                        -> GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                        -> (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              GHC.Prim.Int# #)}
                                ds1
                                GHC.Prim.realWorld# of wild2 { (#,#) ds4 ds5 ->
                         case ds5 of wild3 {
                           DEFAULT -> Data.Aeson.Types.Internal.Null
                           0
                           -> case Data.Scientific.$wfromFloatDigits
                                     @ GHC.Types.Float
                                     GHC.Float.$fRealFloatFloat
                                     ds of ww1 { (#,#) ww2 ww3 ->
                              Data.Aeson.Types.Internal.Number
                                (Data.Scientific.Scientific ww2 ww3) } } } } } })) -}
276c1a0298a40e6e39b9f2e37b0ad2a1
  $fToJSONGeoshitResp4 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
a5963bbf740f28d389f1e2b7a98aae86
  $fToJSONGeoshitResp5 ::
    Data.Aeson.Types.Internal.Options
    -> GHC.Generics.S1
         GeoShit.S1_0_0Location
         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
         a8
    -> [Data.Aeson.Types.Internal.Pair]
    -> [Data.Aeson.Types.Internal.Pair]
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A,A,A,A)><L,1*U(U)>,
     Unfolding: (\ @ a15
                   eta :: Data.Aeson.Types.Internal.Options
                   eta1 :: GHC.Generics.S1
                             GeoShit.S1_0_0Location
                             (GHC.Generics.K1 GHC.Generics.R GHC.Types.Float)
                             a15 ->
                 GHC.Types.:
                   @ Data.Aeson.Types.Internal.Pair
                   (case eta of wild { Data.Aeson.Types.Internal.Options ds1 ds2 ds3 ds4 ds5 ->
                    case ds1 GeoShit.$fSelectorLocation1 of dt { DEFAULT ->
                    GHC.ST.runSTRep
                      @ Data.Text.Internal.Text
                      (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                       case GHC.Prim.newByteArray# @ s1 8 s2 of ds7 { (#,#) ipv ipv1 ->
                       GeoShit.$fToJSONGeoshitResp6
                         @ s1
                         (Data.Text.Array.MArray @ s1 ipv1)
                         GeoShit.$fFromJSONAccessPoint7
                         dt
                         0
                         ipv }) } },
                    case eta1
                           `cast`
                         (Trans
                              (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <GeoShit.S1_0_0Location>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Float>_R <a15>_N)
                              (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P
                                   <GHC.Types.Float>_R
                                   <a15>_P)) of ds { GHC.Types.F# ds1 ->
                    case {__pkg_ccall base-4.8.2.0 isFloatNaN GHC.Prim.Float#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                           ds1
                           GHC.Prim.realWorld# of wild { (#,#) ds2 ds3 ->
                    case ds3 of wild1 {
                      DEFAULT -> Data.Aeson.Types.Internal.Null
                      0
                      -> case {__pkg_ccall base-4.8.2.0 isFloatInfinite GHC.Prim.Float#
                                                                        -> GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                        -> (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              GHC.Prim.Int# #)}
                                ds1
                                GHC.Prim.realWorld# of wild2 { (#,#) ds4 ds5 ->
                         case ds5 of wild3 {
                           DEFAULT -> Data.Aeson.Types.Internal.Null
                           0
                           -> case Data.Scientific.$wfromFloatDigits
                                     @ GHC.Types.Float
                                     GHC.Float.$fRealFloatFloat
                                     ds of ww1 { (#,#) ww2 ww3 ->
                              Data.Aeson.Types.Internal.Number
                                (Data.Scientific.Scientific ww2 ww3) } } } } } })) -}
0eae5d4fb145582ec87c010ba15bd02b
  $fToJSONGeoshitResp6 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
d9d6934009fa7fd34a57c02710b62340
  $fToJSONGeoshitResp7 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   GeoShit.$fToJSONGeoshitResp8) -}
05eae48bf17585d8e3b0c095e6f4c8c2
  $fToJSONGeoshitResp8 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 GeoShit.$fToJSONGeoshitResp9
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   GeoShit.$fFromJSONAccessPoint7
                   GeoShit.$fFromJSONGeoshitResp13
                   0
                   ipv }) -}
ca37badb0bb7250b04f21560eb6d05ff
  $fToJSONGeoshitResp9 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
fed875e713fbf1c721c693371aae9dfb
  $fToJSONGeoshitResp_$ctoJSON ::
    GeoShit.GeoshitResp -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(U))>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GeoShit.GeoshitResp ->
                 case w of ww { GeoShit.GeoshitResp ww1 ww2 ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (GeoShit.$fToJSONGeoshitResp7,
                            GeoShit.$fToJSONGeoshitResp_$ctoJSON1 ww1)
                           (GeoShit.$fToJSONGeoshitResp1
                              @ GHC.Prim.Any
                              Data.Aeson.Types.Internal.defaultOptions
                              ww2
                                `cast`
                              (Trans
                                   (Sym (GHC.Generics.NTCo:K1[0]
                                             <GHC.Generics.R>_P
                                             <GHC.Types.Float>_R
                                             <GHC.Prim.Any>_P))
                                   (Sym (GHC.Generics.NTCo:M1[0]
                                             <GHC.Generics.S>_P
                                             <GeoShit.S1_0_1GeoshitResp>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R
                                                GHC.Types.Float>_R) <GHC.Prim.Any>_N))
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 Data.Aeson.Types.Internal.Object dt } }) -}
16aefeffd5df553705d3a9ec7a59addb
  $fToJSONGeoshitResp_$ctoJSON1 ::
    GeoShit.Location -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GeoShit.Location ->
                 case w of ww { GeoShit.Location ww1 ww2 ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GeoShit.$fToJSONGeoshitResp5
                           @ GHC.Prim.Any
                           Data.Aeson.Types.Internal.defaultOptions
                           ww1
                             `cast`
                           (Trans
                                (Sym (GHC.Generics.NTCo:K1[0]
                                          <GHC.Generics.R>_P <GHC.Types.Float>_R <GHC.Prim.Any>_P))
                                (Sym (GHC.Generics.NTCo:M1[0]
                                          <GHC.Generics.S>_P
                                          <GeoShit.S1_0_0Location>_P
                                          <GHC.Generics.K1
                                             GHC.Generics.R GHC.Types.Float>_R) <GHC.Prim.Any>_N))
                           (GeoShit.$fToJSONGeoshitResp3
                              @ GHC.Prim.Any
                              Data.Aeson.Types.Internal.defaultOptions
                              ww2
                                `cast`
                              (Trans
                                   (Sym (GHC.Generics.NTCo:K1[0]
                                             <GHC.Generics.R>_P
                                             <GHC.Types.Float>_R
                                             <GHC.Prim.Any>_P))
                                   (Sym (GHC.Generics.NTCo:M1[0]
                                             <GHC.Generics.S>_P
                                             <GeoShit.S1_0_1Location>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R
                                                GHC.Types.Float>_R) <GHC.Prim.Any>_N))
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 Data.Aeson.Types.Internal.Object dt } }) -}
16aefeffd5df553705d3a9ec7a59addb
  $fToJSONLocation :: Data.Aeson.Types.Class.ToJSON GeoShit.Location
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GeoShit.$fToJSONGeoshitResp_$ctoJSON1
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <GeoShit.Location>_N)) -}
6f4b4c0ffecbb92f029e4d402def162d
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       GeoShit.$fShowAccessPoint4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          GeoShit.$fShowAccessPoint3
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows6
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Base.++ @ GHC.Types.Char GeoShit.$fShowAccessPoint2 x)))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)) }) -}
bc77cc4e2ec6f9c6033cf5982f00e447
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [GeoShit.AccessPoint] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [GeoShit.AccessPoint]
                   w :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       GeoShit.$fShowGeoshitReq3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          GeoShit.$fShowGeoshitReq2
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++ @ GHC.Types.Char GeoShit.$fShowAccessPoint2 x
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# "[]"# s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (case x1 of ww2 { GeoShit.AccessPoint ww3 ->
                                   GeoShit.$w$cshowsPrec
                                     0
                                     ww3
                                     (let {
                                        lvl43 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                      } in
                                      letrec {
                                        showl :: [GeoShit.AccessPoint] -> [GHC.Types.Char]
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ ds2 :: [GeoShit.AccessPoint] ->
                                          case ds2 of wild1 {
                                            [] -> lvl43
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (case y of ww4 { GeoShit.AccessPoint ww5 ->
                                                  GeoShit.$w$cshowsPrec 0 ww5 (showl ys) }) }
                                      } in
                                      showl xs) }) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)) }) -}
d06765254bbab60b85d7b8f854044c86
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GeoShit.Location -> GHC.Types.Float -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U(U),1*U(U))><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GeoShit.Location
                   ww2 :: GHC.Types.Float ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { GeoShit.Location ww4 ww5 ->
                     GeoShit.$w$cshowsPrec3 0 ww4 ww5 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.F# ww4 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       GeoShit.$fShowGeoshitResp6
                       ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       GeoShit.$fShowGeoshitResp5
                       (GHC.Base.++
                          @ GHC.Types.Char
                          GeoShit.$fShowGeoshitResp4
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                GeoShit.$fShowGeoshitResp3
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   GeoShit.$fShowGeoshitResp2
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GeoShit.$fShowAccessPoint2
                                         x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
19ab8f8e65fce8fd5683b5e88b1f0e0c
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> GHC.Types.Float -> GHC.Types.Float -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Types.Float
                   ww2 :: GHC.Types.Float ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { GHC.Types.F# ww4 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       GeoShit.$fShowGeoshitResp6
                       ww4 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.F# ww4 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       GeoShit.$fShowGeoshitResp6
                       ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       GeoShit.$fShowGeoshitResp9
                       (GHC.Base.++
                          @ GHC.Types.Char
                          GeoShit.$fShowGeoshitResp8
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                GeoShit.$fShowGeoshitResp3
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   GeoShit.$fShowGeoshitResp7
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GeoShit.$fShowAccessPoint2
                                         x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
5009ef72efb4c0c48c50da051026bce8
  $w$ctoJSON ::
    GeoShit.AccessPoint -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ w :: GeoShit.AccessPoint ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (GeoShit.$fToJSONAccessPoint2,
                            case w of wild { GeoShit.AccessPoint g1 ->
                            case GHC.ST.runSTRep
                                   @ Data.Text.Internal.Text
                                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                                    GeoShit.$fToJSONAccessPoint1
                                      @ s1
                                      (Data.Text.Array.MArray @ s1 ipv1)
                                      GeoShit.$fFromJSONAccessPoint7
                                      g1
                                      0
                                      ipv }) of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                            Data.Aeson.Types.Internal.String dt } })
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 (# dt #) }) -}
755cc0d3247004cdffb184c9167b5e67
  $wa ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [GeoShit.AccessPoint]
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Array# Data.Aeson.Types.Internal.Value ->
                 letrec {
                   $wgo :: GHC.Prim.Int#
                           -> Data.Aeson.Types.Internal.Parser [GeoShit.AccessPoint]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww3 :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww3 ww1) of wild2 {
                       GHC.Types.False
                       -> let {
                            r :: Data.Aeson.Types.Internal.Parser [GeoShit.AccessPoint]
                            = $wgo (GHC.Prim.+# ww3 1)
                          } in
                          let {
                            m :: Data.Aeson.Types.Internal.Parser GeoShit.AccessPoint
                            = case GHC.Prim.indexArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     ww2
                                     (GHC.Prim.+# ww ww3) of ds2 { (##) ipv ->
                              GeoShit.$fFromJSONAccessPoint_$cparseJSON ipv }
                          } in
                          (\ @ (f :: * -> *)
                             @ r1
                             kf :: Data.Aeson.Types.Internal.Failure f r1
                             ks :: Data.Aeson.Types.Internal.Success
                                     [GeoShit.AccessPoint] f r1 ->
                           m `cast`
                           (Data.Aeson.Types.Internal.NTCo:Parser[0] <GeoShit.AccessPoint>_R)
                             @ f
                             @ r1
                             kf
                             (\ a65 :: GeoShit.AccessPoint ->
                              r `cast`
                              (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                   <[GeoShit.AccessPoint]>_R)
                                @ f
                                @ r1
                                kf
                                (\ a66 :: [GeoShit.AccessPoint] ->
                                 ks (GHC.Types.: @ GeoShit.AccessPoint a65 a66))))
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                    <[GeoShit.AccessPoint]>_R))
                       GHC.Types.True
                       -> GeoShit.$fFromJSONGeoshitReq1
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                    <[GeoShit.AccessPoint]>_R)) }
                 } in
                 $wgo 0) -}
c1e70f0d2dffc7af89f440e7352a75e7
  $wa1 ::
    [GeoShit.AccessPoint] -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GeoShit.AccessPoint] ->
                 case GHC.ST.runSTRep
                        @ (Data.Vector.Vector Data.Aeson.Types.Internal.Value)
                        (\ @ s s1 :: GHC.Prim.State# s[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                0
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                         case GeoShit.$fToJSONGeoshitReq3
                                @ s
                                GHC.Types.SPEC
                                ((Data.Vector.Mutable.MVector
                                    @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                    @ Data.Aeson.Types.Internal.Value
                                    0
                                    0
                                    ipv1)
                                   `cast`
                                 (Sub (Sym (Data.Vector.TFCo:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        s)>_N <Data.Aeson.Types.Internal.Value>_N),
                                 GeoShit.$fShowGeoshitResp6)
                                (GHC.Base.map
                                   @ GeoShit.AccessPoint
                                   @ Data.Aeson.Types.Internal.Value
                                   GeoShit.$fToJSONAccessPoint_$ctoJSON
                                   w)
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                        <s>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                         case ipv7 of wild5 { (,) v' n ->
                         case v'
                                `cast`
                              (Sub (Data.Vector.TFCo:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               s)>_N <Data.Aeson.Types.Internal.Value>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                         case n of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                @ Data.Aeson.Types.Internal.Value
                                dt2
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.TFCo:R:PrimStateST[0] <s>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              dt
                              dt6
                              ipv3 #) } } } } } }) of dt { Data.Vector.Vector ipv ipv1 ipv2 ->
                 (# dt #) }) -}
5009ef72efb4c0c48c50da051026bce8
  data AccessPoint = AccessPoint {address :: GHC.Base.String}
4e54c0ef57583ac4616032443f9ccaf7
  abstract(True) C1_0AccessPoint
55a34017a722a8d4241705d6836a559b
  abstract(True) C1_0GeoshitReq
36cb3ac4b2049d6bca0ca271a9c08502
  abstract(True) C1_0GeoshitResp
e84c4e60af0f53406b149a64ce74866e
  abstract(True) C1_0Location
92144396dcf694a4a56bc6a93d3bb23e
  abstract(True) D1AccessPoint
0fa0af4fb41bda75bd137b7b0af0e219
  abstract(True) D1GeoshitReq
77060fbd0bad0ffbe755933903fec7c9
  abstract(True) D1GeoshitResp
5a32c7f75014afffc90ef7b069c33482
  abstract(True) D1Location
35f5bdd843de7965b649b0b1a138e613
  data GeoshitReq = GeoshitReq {wifiAPs :: [GeoShit.AccessPoint]}
fed875e713fbf1c721c693371aae9dfb
  data GeoshitResp
    = GeoshitResp {location :: GeoShit.Location,
                   accuracy :: GHC.Types.Float}
16aefeffd5df553705d3a9ec7a59addb
  data Location
    = Location {lat :: GHC.Types.Float, lng :: GHC.Types.Float}
5009ef72efb4c0c48c50da051026bce8
  axiom Rep_AccessPoint::
      GHC.Generics.Rep GeoShit.AccessPoint
        = GHC.Generics.D1
            GeoShit.D1AccessPoint
            (GHC.Generics.C1
               GeoShit.C1_0AccessPoint
               (GHC.Generics.S1
                  GeoShit.S1_0_0AccessPoint (GHC.Generics.Rec0 GHC.Base.String)))
35f5bdd843de7965b649b0b1a138e613
  axiom Rep_GeoshitReq::
      GHC.Generics.Rep GeoShit.GeoshitReq
        = GHC.Generics.D1
            GeoShit.D1GeoshitReq
            (GHC.Generics.C1
               GeoShit.C1_0GeoshitReq
               (GHC.Generics.S1
                  GeoShit.S1_0_0GeoshitReq
                  (GHC.Generics.Rec0 [GeoShit.AccessPoint])))
fed875e713fbf1c721c693371aae9dfb
  axiom Rep_GeoshitResp::
      GHC.Generics.Rep GeoShit.GeoshitResp
        = GHC.Generics.D1
            GeoShit.D1GeoshitResp
            (GHC.Generics.C1
               GeoShit.C1_0GeoshitResp
               (GHC.Generics.S1
                  GeoShit.S1_0_0GeoshitResp (GHC.Generics.Rec0 GeoShit.Location)
                GHC.Generics.:*: GHC.Generics.S1
                                   GeoShit.S1_0_1GeoshitResp (GHC.Generics.Rec0 GHC.Types.Float)))
16aefeffd5df553705d3a9ec7a59addb
  axiom Rep_Location::
      GHC.Generics.Rep GeoShit.Location
        = GHC.Generics.D1
            GeoShit.D1Location
            (GHC.Generics.C1
               GeoShit.C1_0Location
               (GHC.Generics.S1
                  GeoShit.S1_0_0Location (GHC.Generics.Rec0 GHC.Types.Float)
                GHC.Generics.:*: GHC.Generics.S1
                                   GeoShit.S1_0_1Location (GHC.Generics.Rec0 GHC.Types.Float)))
5009ef72efb4c0c48c50da051026bce8
  abstract(True) S1_0_0AccessPoint
35f5bdd843de7965b649b0b1a138e613
  abstract(True) S1_0_0GeoshitReq
e21c1d2fdb8dc5365ab089b3399b493c
  abstract(True) S1_0_0GeoshitResp
3839e72bf85ab1d1fa94c512862c4973
  abstract(True) S1_0_0Location
fed875e713fbf1c721c693371aae9dfb
  abstract(True) S1_0_1GeoshitResp
16aefeffd5df553705d3a9ec7a59addb
  abstract(True) S1_0_1Location
a42e6a0f58c9abf2d4645355f2f3ad90
  accuracy :: GeoShit.GeoshitResp -> GHC.Types.Float
  RecSel GeoShit.GeoshitResp
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GeoShit.GeoshitResp ->
                 case ds of wild { GeoShit.GeoshitResp ds1 ds2 -> ds2 }) -}
9bf2d2be5b2db052dde2917861c5b6ac
  address :: GeoShit.AccessPoint -> GHC.Base.String
  RecSel GeoShit.AccessPoint
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GeoShit.AccessPoint ->
                 case ds of wild { GeoShit.AccessPoint ds1 -> ds1 }) -}
c6378a4f23ae0a307c2a3b61116daf9d
  lat :: GeoShit.Location -> GHC.Types.Float
  RecSel GeoShit.Location
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GeoShit.Location ->
                 case ds of wild { GeoShit.Location ds1 ds2 -> ds1 }) -}
de53f7a777e401d2ac146d1f803cde8a
  lng :: GeoShit.Location -> GHC.Types.Float
  RecSel GeoShit.Location
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GeoShit.Location ->
                 case ds of wild { GeoShit.Location ds1 ds2 -> ds2 }) -}
dbf7f29b41f786be8718ecbd0744b0bf
  location :: GeoShit.GeoshitResp -> GeoShit.Location
  RecSel GeoShit.GeoshitResp
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GeoShit.GeoshitResp ->
                 case ds of wild { GeoShit.GeoshitResp ds1 ds2 -> ds1 }) -}
a5d6b22f4e7f08d30bd74aeb988c7d5e
  lookupLatLong ::
    GHC.Base.Maybe GeoShit.Location
    -> GHC.Types.IO (GHC.Base.String, GHC.Base.String)
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GeoShit.lookupLatLong1
                  `cast`
                (<GHC.Base.Maybe GeoShit.Location>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(GHC.Base.String, GHC.Base.String)>_R)) -}
854a291dab69b60200f7b636c9ef9b25
  lookupLatLong1 ::
    GHC.Base.Maybe GeoShit.Location
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.String, GHC.Base.String) #)
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
ac8d716892b1a676f28b0997f90cfb2b
  newLength :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ x :: [GHC.Types.Char] ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char x 0 of ww2 { DEFAULT ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0 y) of wild {
                   GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                   GHC.Types.True
                   -> GHC.List.$wunsafeTake @ GHC.Types.Char y x } }) -}
8b2f63d5b5b5ec31471c7c18be04703f
  testReq :: GHC.Types.IO (GHC.Base.Maybe GeoShit.Location)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GeoShit.testReq1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <GHC.Base.Maybe GeoShit.Location>_R)) -}
ff71d27a35b9ebbd2b28cb52acf77d8c
  testReq1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe GeoShit.Location #)
  {- Arity: 1, Strictness: <L,U> -}
d90359b8f29e8a6539b095fdb6cd30c1
  wifiAPs :: GeoShit.GeoshitReq -> [GeoShit.AccessPoint]
  RecSel GeoShit.GeoshitReq
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GeoShit.GeoshitReq ->
                 case ds of wild { GeoShit.GeoshitReq ds1 -> ds1 }) -}
instance GHC.Generics.Constructor [GeoShit.C1_0AccessPoint]
  = GeoShit.$fConstructorAccessPoint
instance GHC.Generics.Constructor [GeoShit.C1_0GeoshitReq]
  = GeoShit.$fConstructorGeoshitReq
instance GHC.Generics.Constructor [GeoShit.C1_0GeoshitResp]
  = GeoShit.$fConstructorGeoshitResp
instance GHC.Generics.Constructor [GeoShit.C1_0Location]
  = GeoShit.$fConstructorLocation
instance GHC.Generics.Datatype [GeoShit.D1AccessPoint]
  = GeoShit.$fDatatypeAccessPoint
instance GHC.Generics.Datatype [GeoShit.D1GeoshitReq]
  = GeoShit.$fDatatypeGeoshitReq
instance GHC.Generics.Datatype [GeoShit.D1GeoshitResp]
  = GeoShit.$fDatatypeGeoshitResp
instance GHC.Generics.Datatype [GeoShit.D1Location]
  = GeoShit.$fDatatypeLocation
instance Data.Aeson.Types.Class.FromJSON [GeoShit.AccessPoint]
  = GeoShit.$fFromJSONAccessPoint
instance Data.Aeson.Types.Class.FromJSON [GeoShit.GeoshitReq]
  = GeoShit.$fFromJSONGeoshitReq
instance Data.Aeson.Types.Class.FromJSON [GeoShit.GeoshitResp]
  = GeoShit.$fFromJSONGeoshitResp
instance Data.Aeson.Types.Class.FromJSON [GeoShit.Location]
  = GeoShit.$fFromJSONLocation
instance GHC.Generics.Generic [GeoShit.AccessPoint]
  = GeoShit.$fGenericAccessPoint
instance GHC.Generics.Generic [GeoShit.GeoshitReq]
  = GeoShit.$fGenericGeoshitReq
instance GHC.Generics.Generic [GeoShit.GeoshitResp]
  = GeoShit.$fGenericGeoshitResp
instance GHC.Generics.Generic [GeoShit.Location]
  = GeoShit.$fGenericLocation
instance GHC.Generics.Selector [GeoShit.S1_0_0AccessPoint]
  = GeoShit.$fSelectorAccessPoint
instance GHC.Generics.Selector [GeoShit.S1_0_0GeoshitReq]
  = GeoShit.$fSelectorGeoshitReq
instance GHC.Generics.Selector [GeoShit.S1_0_0GeoshitResp]
  = GeoShit.$fSelectorGeoshitResp
instance GHC.Generics.Selector [GeoShit.S1_0_1GeoshitResp]
  = GeoShit.$fSelectorGeoshitResp0
instance GHC.Generics.Selector [GeoShit.S1_0_0Location]
  = GeoShit.$fSelectorLocation
instance GHC.Generics.Selector [GeoShit.S1_0_1Location]
  = GeoShit.$fSelectorLocation0
instance GHC.Show.Show [GeoShit.AccessPoint]
  = GeoShit.$fShowAccessPoint
instance GHC.Show.Show [GeoShit.GeoshitReq]
  = GeoShit.$fShowGeoshitReq
instance GHC.Show.Show [GeoShit.GeoshitResp]
  = GeoShit.$fShowGeoshitResp
instance GHC.Show.Show [GeoShit.Location] = GeoShit.$fShowLocation
instance Data.Aeson.Types.Class.ToJSON [GeoShit.AccessPoint]
  = GeoShit.$fToJSONAccessPoint
instance Data.Aeson.Types.Class.ToJSON [GeoShit.GeoshitReq]
  = GeoShit.$fToJSONGeoshitReq
instance Data.Aeson.Types.Class.ToJSON [GeoShit.GeoshitResp]
  = GeoShit.$fToJSONGeoshitResp
instance Data.Aeson.Types.Class.ToJSON [GeoShit.Location]
  = GeoShit.$fToJSONLocation
family instance GHC.Generics.Rep [GeoShit.GeoshitResp]
  = GeoShit.Rep_GeoshitResp
family instance GHC.Generics.Rep [GeoShit.Location]
  = GeoShit.Rep_Location
family instance GHC.Generics.Rep [GeoShit.GeoshitReq]
  = GeoShit.Rep_GeoshitReq
family instance GHC.Generics.Rep [GeoShit.AccessPoint]
  = GeoShit.Rep_AccessPoint
"SPEC/GeoShit $dmconFixity @ C1_0AccessPoint" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                                 GeoShit.C1_0AccessPoint
  GHC.Generics.$dmconFixity @ GeoShit.C1_0AccessPoint $dConstructor
  = GeoShit.$fConstructorAccessPoint_$s$dmconFixity
"SPEC/GeoShit $dmconFixity @ C1_0GeoshitReq" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                                GeoShit.C1_0GeoshitReq
  GHC.Generics.$dmconFixity @ GeoShit.C1_0GeoshitReq $dConstructor
  = GeoShit.$fConstructorGeoshitReq_$s$dmconFixity
"SPEC/GeoShit $dmconFixity @ C1_0GeoshitResp" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                                 GeoShit.C1_0GeoshitResp
  GHC.Generics.$dmconFixity @ GeoShit.C1_0GeoshitResp $dConstructor
  = GeoShit.$fConstructorGeoshitResp_$s$dmconFixity
"SPEC/GeoShit $dmconFixity @ C1_0Location" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                              GeoShit.C1_0Location
  GHC.Generics.$dmconFixity @ GeoShit.C1_0Location $dConstructor
  = GeoShit.$fConstructorLocation_$s$dmconFixity
"SPEC/GeoShit $dmisNewtype @ D1AccessPoint" [ALWAYS] forall $dDatatype :: GHC.Generics.Datatype
                                                                            GeoShit.D1AccessPoint
  GHC.Generics.$dmisNewtype @ GeoShit.D1AccessPoint $dDatatype
  = GeoShit.$fDatatypeAccessPoint_$s$dmisNewtype
"SPEC/GeoShit $dmisNewtype @ D1GeoshitReq" [ALWAYS] forall $dDatatype :: GHC.Generics.Datatype
                                                                           GeoShit.D1GeoshitReq
  GHC.Generics.$dmisNewtype @ GeoShit.D1GeoshitReq $dDatatype
  = GeoShit.$fDatatypeGeoshitReq_$s$dmisNewtype
"SPEC/GeoShit $dmisNewtype @ D1GeoshitResp" [ALWAYS] forall $dDatatype :: GHC.Generics.Datatype
                                                                            GeoShit.D1GeoshitResp
  GHC.Generics.$dmisNewtype @ GeoShit.D1GeoshitResp $dDatatype
  = GeoShit.$fDatatypeGeoshitResp_$s$dmisNewtype
"SPEC/GeoShit $dmisNewtype @ D1Location" [ALWAYS] forall $dDatatype :: GHC.Generics.Datatype
                                                                         GeoShit.D1Location
  GHC.Generics.$dmisNewtype @ GeoShit.D1Location $dDatatype
  = GeoShit.$fDatatypeLocation_$s$dmisNewtype
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

